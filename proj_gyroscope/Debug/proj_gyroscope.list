
proj_gyroscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df8  08003df8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003df8  08003df8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003df8  08003df8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003e0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003e0c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009144  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001631  00000000  00000000  00029178  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b8  00000000  00000000  0002a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f0  00000000  00000000  0002b068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000cab7  00000000  00000000  0002b858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000079ae  00000000  00000000  0003830f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000484f5  00000000  00000000  0003fcbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000881b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f80  00000000  00000000  00088230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d68 	.word	0x08003d68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003d68 	.word	0x08003d68

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_dadd>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	000c      	movs	r4, r1
 80003fe:	0309      	lsls	r1, r1, #12
 8000400:	b5c0      	push	{r6, r7, lr}
 8000402:	0a49      	lsrs	r1, r1, #9
 8000404:	0f47      	lsrs	r7, r0, #29
 8000406:	005e      	lsls	r6, r3, #1
 8000408:	4339      	orrs	r1, r7
 800040a:	031f      	lsls	r7, r3, #12
 800040c:	0fdb      	lsrs	r3, r3, #31
 800040e:	469c      	mov	ip, r3
 8000410:	0065      	lsls	r5, r4, #1
 8000412:	0a7b      	lsrs	r3, r7, #9
 8000414:	0f57      	lsrs	r7, r2, #29
 8000416:	431f      	orrs	r7, r3
 8000418:	0d6d      	lsrs	r5, r5, #21
 800041a:	0fe4      	lsrs	r4, r4, #31
 800041c:	0d76      	lsrs	r6, r6, #21
 800041e:	46a1      	mov	r9, r4
 8000420:	00c0      	lsls	r0, r0, #3
 8000422:	46b8      	mov	r8, r7
 8000424:	00d2      	lsls	r2, r2, #3
 8000426:	1bab      	subs	r3, r5, r6
 8000428:	4564      	cmp	r4, ip
 800042a:	d07b      	beq.n	8000524 <__aeabi_dadd+0x130>
 800042c:	2b00      	cmp	r3, #0
 800042e:	dd5f      	ble.n	80004f0 <__aeabi_dadd+0xfc>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d000      	beq.n	8000436 <__aeabi_dadd+0x42>
 8000434:	e0a4      	b.n	8000580 <__aeabi_dadd+0x18c>
 8000436:	003e      	movs	r6, r7
 8000438:	4316      	orrs	r6, r2
 800043a:	d100      	bne.n	800043e <__aeabi_dadd+0x4a>
 800043c:	e112      	b.n	8000664 <__aeabi_dadd+0x270>
 800043e:	1e5e      	subs	r6, r3, #1
 8000440:	2e00      	cmp	r6, #0
 8000442:	d000      	beq.n	8000446 <__aeabi_dadd+0x52>
 8000444:	e19e      	b.n	8000784 <__aeabi_dadd+0x390>
 8000446:	1a87      	subs	r7, r0, r2
 8000448:	4643      	mov	r3, r8
 800044a:	42b8      	cmp	r0, r7
 800044c:	4180      	sbcs	r0, r0
 800044e:	2501      	movs	r5, #1
 8000450:	1ac9      	subs	r1, r1, r3
 8000452:	4240      	negs	r0, r0
 8000454:	1a09      	subs	r1, r1, r0
 8000456:	020b      	lsls	r3, r1, #8
 8000458:	d400      	bmi.n	800045c <__aeabi_dadd+0x68>
 800045a:	e131      	b.n	80006c0 <__aeabi_dadd+0x2cc>
 800045c:	0249      	lsls	r1, r1, #9
 800045e:	0a4e      	lsrs	r6, r1, #9
 8000460:	2e00      	cmp	r6, #0
 8000462:	d100      	bne.n	8000466 <__aeabi_dadd+0x72>
 8000464:	e16e      	b.n	8000744 <__aeabi_dadd+0x350>
 8000466:	0030      	movs	r0, r6
 8000468:	f000 fe52 	bl	8001110 <__clzsi2>
 800046c:	0003      	movs	r3, r0
 800046e:	3b08      	subs	r3, #8
 8000470:	2b1f      	cmp	r3, #31
 8000472:	dd00      	ble.n	8000476 <__aeabi_dadd+0x82>
 8000474:	e161      	b.n	800073a <__aeabi_dadd+0x346>
 8000476:	2220      	movs	r2, #32
 8000478:	0039      	movs	r1, r7
 800047a:	1ad2      	subs	r2, r2, r3
 800047c:	409e      	lsls	r6, r3
 800047e:	40d1      	lsrs	r1, r2
 8000480:	409f      	lsls	r7, r3
 8000482:	430e      	orrs	r6, r1
 8000484:	429d      	cmp	r5, r3
 8000486:	dd00      	ble.n	800048a <__aeabi_dadd+0x96>
 8000488:	e151      	b.n	800072e <__aeabi_dadd+0x33a>
 800048a:	1b5d      	subs	r5, r3, r5
 800048c:	1c6b      	adds	r3, r5, #1
 800048e:	2b1f      	cmp	r3, #31
 8000490:	dd00      	ble.n	8000494 <__aeabi_dadd+0xa0>
 8000492:	e17c      	b.n	800078e <__aeabi_dadd+0x39a>
 8000494:	2120      	movs	r1, #32
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	003d      	movs	r5, r7
 800049a:	0030      	movs	r0, r6
 800049c:	408f      	lsls	r7, r1
 800049e:	4088      	lsls	r0, r1
 80004a0:	40dd      	lsrs	r5, r3
 80004a2:	1e79      	subs	r1, r7, #1
 80004a4:	418f      	sbcs	r7, r1
 80004a6:	0031      	movs	r1, r6
 80004a8:	2207      	movs	r2, #7
 80004aa:	4328      	orrs	r0, r5
 80004ac:	40d9      	lsrs	r1, r3
 80004ae:	2500      	movs	r5, #0
 80004b0:	4307      	orrs	r7, r0
 80004b2:	403a      	ands	r2, r7
 80004b4:	2a00      	cmp	r2, #0
 80004b6:	d009      	beq.n	80004cc <__aeabi_dadd+0xd8>
 80004b8:	230f      	movs	r3, #15
 80004ba:	403b      	ands	r3, r7
 80004bc:	2b04      	cmp	r3, #4
 80004be:	d005      	beq.n	80004cc <__aeabi_dadd+0xd8>
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	42bb      	cmp	r3, r7
 80004c4:	41bf      	sbcs	r7, r7
 80004c6:	427f      	negs	r7, r7
 80004c8:	19c9      	adds	r1, r1, r7
 80004ca:	001f      	movs	r7, r3
 80004cc:	020b      	lsls	r3, r1, #8
 80004ce:	d400      	bmi.n	80004d2 <__aeabi_dadd+0xde>
 80004d0:	e226      	b.n	8000920 <__aeabi_dadd+0x52c>
 80004d2:	1c6a      	adds	r2, r5, #1
 80004d4:	4bc6      	ldr	r3, [pc, #792]	; (80007f0 <__aeabi_dadd+0x3fc>)
 80004d6:	0555      	lsls	r5, r2, #21
 80004d8:	0d6d      	lsrs	r5, r5, #21
 80004da:	429a      	cmp	r2, r3
 80004dc:	d100      	bne.n	80004e0 <__aeabi_dadd+0xec>
 80004de:	e106      	b.n	80006ee <__aeabi_dadd+0x2fa>
 80004e0:	4ac4      	ldr	r2, [pc, #784]	; (80007f4 <__aeabi_dadd+0x400>)
 80004e2:	08ff      	lsrs	r7, r7, #3
 80004e4:	400a      	ands	r2, r1
 80004e6:	0753      	lsls	r3, r2, #29
 80004e8:	0252      	lsls	r2, r2, #9
 80004ea:	433b      	orrs	r3, r7
 80004ec:	0b12      	lsrs	r2, r2, #12
 80004ee:	e08e      	b.n	800060e <__aeabi_dadd+0x21a>
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d000      	beq.n	80004f6 <__aeabi_dadd+0x102>
 80004f4:	e0b8      	b.n	8000668 <__aeabi_dadd+0x274>
 80004f6:	1c6b      	adds	r3, r5, #1
 80004f8:	055b      	lsls	r3, r3, #21
 80004fa:	0d5b      	lsrs	r3, r3, #21
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	dc00      	bgt.n	8000502 <__aeabi_dadd+0x10e>
 8000500:	e130      	b.n	8000764 <__aeabi_dadd+0x370>
 8000502:	1a87      	subs	r7, r0, r2
 8000504:	4643      	mov	r3, r8
 8000506:	42b8      	cmp	r0, r7
 8000508:	41b6      	sbcs	r6, r6
 800050a:	1acb      	subs	r3, r1, r3
 800050c:	4276      	negs	r6, r6
 800050e:	1b9e      	subs	r6, r3, r6
 8000510:	0233      	lsls	r3, r6, #8
 8000512:	d500      	bpl.n	8000516 <__aeabi_dadd+0x122>
 8000514:	e14c      	b.n	80007b0 <__aeabi_dadd+0x3bc>
 8000516:	003b      	movs	r3, r7
 8000518:	4333      	orrs	r3, r6
 800051a:	d1a1      	bne.n	8000460 <__aeabi_dadd+0x6c>
 800051c:	2200      	movs	r2, #0
 800051e:	2400      	movs	r4, #0
 8000520:	2500      	movs	r5, #0
 8000522:	e070      	b.n	8000606 <__aeabi_dadd+0x212>
 8000524:	2b00      	cmp	r3, #0
 8000526:	dc00      	bgt.n	800052a <__aeabi_dadd+0x136>
 8000528:	e0e5      	b.n	80006f6 <__aeabi_dadd+0x302>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_dadd+0x13c>
 800052e:	e083      	b.n	8000638 <__aeabi_dadd+0x244>
 8000530:	4eaf      	ldr	r6, [pc, #700]	; (80007f0 <__aeabi_dadd+0x3fc>)
 8000532:	42b5      	cmp	r5, r6
 8000534:	d060      	beq.n	80005f8 <__aeabi_dadd+0x204>
 8000536:	2680      	movs	r6, #128	; 0x80
 8000538:	0436      	lsls	r6, r6, #16
 800053a:	4337      	orrs	r7, r6
 800053c:	46b8      	mov	r8, r7
 800053e:	2b38      	cmp	r3, #56	; 0x38
 8000540:	dc00      	bgt.n	8000544 <__aeabi_dadd+0x150>
 8000542:	e13e      	b.n	80007c2 <__aeabi_dadd+0x3ce>
 8000544:	4643      	mov	r3, r8
 8000546:	4313      	orrs	r3, r2
 8000548:	001f      	movs	r7, r3
 800054a:	1e7a      	subs	r2, r7, #1
 800054c:	4197      	sbcs	r7, r2
 800054e:	183f      	adds	r7, r7, r0
 8000550:	4287      	cmp	r7, r0
 8000552:	4180      	sbcs	r0, r0
 8000554:	4240      	negs	r0, r0
 8000556:	1809      	adds	r1, r1, r0
 8000558:	020b      	lsls	r3, r1, #8
 800055a:	d400      	bmi.n	800055e <__aeabi_dadd+0x16a>
 800055c:	e0b0      	b.n	80006c0 <__aeabi_dadd+0x2cc>
 800055e:	4ba4      	ldr	r3, [pc, #656]	; (80007f0 <__aeabi_dadd+0x3fc>)
 8000560:	3501      	adds	r5, #1
 8000562:	429d      	cmp	r5, r3
 8000564:	d100      	bne.n	8000568 <__aeabi_dadd+0x174>
 8000566:	e0c3      	b.n	80006f0 <__aeabi_dadd+0x2fc>
 8000568:	4aa2      	ldr	r2, [pc, #648]	; (80007f4 <__aeabi_dadd+0x400>)
 800056a:	087b      	lsrs	r3, r7, #1
 800056c:	400a      	ands	r2, r1
 800056e:	2101      	movs	r1, #1
 8000570:	400f      	ands	r7, r1
 8000572:	431f      	orrs	r7, r3
 8000574:	0851      	lsrs	r1, r2, #1
 8000576:	07d3      	lsls	r3, r2, #31
 8000578:	2207      	movs	r2, #7
 800057a:	431f      	orrs	r7, r3
 800057c:	403a      	ands	r2, r7
 800057e:	e799      	b.n	80004b4 <__aeabi_dadd+0xc0>
 8000580:	4e9b      	ldr	r6, [pc, #620]	; (80007f0 <__aeabi_dadd+0x3fc>)
 8000582:	42b5      	cmp	r5, r6
 8000584:	d038      	beq.n	80005f8 <__aeabi_dadd+0x204>
 8000586:	2680      	movs	r6, #128	; 0x80
 8000588:	0436      	lsls	r6, r6, #16
 800058a:	4337      	orrs	r7, r6
 800058c:	46b8      	mov	r8, r7
 800058e:	2b38      	cmp	r3, #56	; 0x38
 8000590:	dd00      	ble.n	8000594 <__aeabi_dadd+0x1a0>
 8000592:	e0dc      	b.n	800074e <__aeabi_dadd+0x35a>
 8000594:	2b1f      	cmp	r3, #31
 8000596:	dc00      	bgt.n	800059a <__aeabi_dadd+0x1a6>
 8000598:	e130      	b.n	80007fc <__aeabi_dadd+0x408>
 800059a:	001e      	movs	r6, r3
 800059c:	4647      	mov	r7, r8
 800059e:	3e20      	subs	r6, #32
 80005a0:	40f7      	lsrs	r7, r6
 80005a2:	46bc      	mov	ip, r7
 80005a4:	2b20      	cmp	r3, #32
 80005a6:	d004      	beq.n	80005b2 <__aeabi_dadd+0x1be>
 80005a8:	2640      	movs	r6, #64	; 0x40
 80005aa:	1af3      	subs	r3, r6, r3
 80005ac:	4646      	mov	r6, r8
 80005ae:	409e      	lsls	r6, r3
 80005b0:	4332      	orrs	r2, r6
 80005b2:	0017      	movs	r7, r2
 80005b4:	4663      	mov	r3, ip
 80005b6:	1e7a      	subs	r2, r7, #1
 80005b8:	4197      	sbcs	r7, r2
 80005ba:	431f      	orrs	r7, r3
 80005bc:	e0cc      	b.n	8000758 <__aeabi_dadd+0x364>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x1d0>
 80005c2:	e204      	b.n	80009ce <__aeabi_dadd+0x5da>
 80005c4:	4643      	mov	r3, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	d100      	bne.n	80005cc <__aeabi_dadd+0x1d8>
 80005ca:	e159      	b.n	8000880 <__aeabi_dadd+0x48c>
 80005cc:	074b      	lsls	r3, r1, #29
 80005ce:	08c0      	lsrs	r0, r0, #3
 80005d0:	4318      	orrs	r0, r3
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	08c9      	lsrs	r1, r1, #3
 80005d6:	031b      	lsls	r3, r3, #12
 80005d8:	4219      	tst	r1, r3
 80005da:	d008      	beq.n	80005ee <__aeabi_dadd+0x1fa>
 80005dc:	4645      	mov	r5, r8
 80005de:	08ed      	lsrs	r5, r5, #3
 80005e0:	421d      	tst	r5, r3
 80005e2:	d104      	bne.n	80005ee <__aeabi_dadd+0x1fa>
 80005e4:	4643      	mov	r3, r8
 80005e6:	08d0      	lsrs	r0, r2, #3
 80005e8:	0759      	lsls	r1, r3, #29
 80005ea:	4308      	orrs	r0, r1
 80005ec:	0029      	movs	r1, r5
 80005ee:	0f42      	lsrs	r2, r0, #29
 80005f0:	00c9      	lsls	r1, r1, #3
 80005f2:	4d7f      	ldr	r5, [pc, #508]	; (80007f0 <__aeabi_dadd+0x3fc>)
 80005f4:	4311      	orrs	r1, r2
 80005f6:	00c0      	lsls	r0, r0, #3
 80005f8:	074b      	lsls	r3, r1, #29
 80005fa:	08ca      	lsrs	r2, r1, #3
 80005fc:	497c      	ldr	r1, [pc, #496]	; (80007f0 <__aeabi_dadd+0x3fc>)
 80005fe:	08c0      	lsrs	r0, r0, #3
 8000600:	4303      	orrs	r3, r0
 8000602:	428d      	cmp	r5, r1
 8000604:	d068      	beq.n	80006d8 <__aeabi_dadd+0x2e4>
 8000606:	0312      	lsls	r2, r2, #12
 8000608:	056d      	lsls	r5, r5, #21
 800060a:	0b12      	lsrs	r2, r2, #12
 800060c:	0d6d      	lsrs	r5, r5, #21
 800060e:	2100      	movs	r1, #0
 8000610:	0312      	lsls	r2, r2, #12
 8000612:	0018      	movs	r0, r3
 8000614:	0b13      	lsrs	r3, r2, #12
 8000616:	0d0a      	lsrs	r2, r1, #20
 8000618:	0512      	lsls	r2, r2, #20
 800061a:	431a      	orrs	r2, r3
 800061c:	4b76      	ldr	r3, [pc, #472]	; (80007f8 <__aeabi_dadd+0x404>)
 800061e:	052d      	lsls	r5, r5, #20
 8000620:	4013      	ands	r3, r2
 8000622:	432b      	orrs	r3, r5
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	07e4      	lsls	r4, r4, #31
 8000628:	085b      	lsrs	r3, r3, #1
 800062a:	4323      	orrs	r3, r4
 800062c:	0019      	movs	r1, r3
 800062e:	bc1c      	pop	{r2, r3, r4}
 8000630:	4690      	mov	r8, r2
 8000632:	4699      	mov	r9, r3
 8000634:	46a2      	mov	sl, r4
 8000636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000638:	003e      	movs	r6, r7
 800063a:	4316      	orrs	r6, r2
 800063c:	d012      	beq.n	8000664 <__aeabi_dadd+0x270>
 800063e:	1e5e      	subs	r6, r3, #1
 8000640:	2e00      	cmp	r6, #0
 8000642:	d000      	beq.n	8000646 <__aeabi_dadd+0x252>
 8000644:	e100      	b.n	8000848 <__aeabi_dadd+0x454>
 8000646:	1887      	adds	r7, r0, r2
 8000648:	4287      	cmp	r7, r0
 800064a:	4180      	sbcs	r0, r0
 800064c:	4441      	add	r1, r8
 800064e:	4240      	negs	r0, r0
 8000650:	1809      	adds	r1, r1, r0
 8000652:	2501      	movs	r5, #1
 8000654:	020b      	lsls	r3, r1, #8
 8000656:	d533      	bpl.n	80006c0 <__aeabi_dadd+0x2cc>
 8000658:	2502      	movs	r5, #2
 800065a:	e785      	b.n	8000568 <__aeabi_dadd+0x174>
 800065c:	4664      	mov	r4, ip
 800065e:	0033      	movs	r3, r6
 8000660:	4641      	mov	r1, r8
 8000662:	0010      	movs	r0, r2
 8000664:	001d      	movs	r5, r3
 8000666:	e7c7      	b.n	80005f8 <__aeabi_dadd+0x204>
 8000668:	2d00      	cmp	r5, #0
 800066a:	d000      	beq.n	800066e <__aeabi_dadd+0x27a>
 800066c:	e0da      	b.n	8000824 <__aeabi_dadd+0x430>
 800066e:	000c      	movs	r4, r1
 8000670:	4304      	orrs	r4, r0
 8000672:	d0f3      	beq.n	800065c <__aeabi_dadd+0x268>
 8000674:	1c5c      	adds	r4, r3, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x286>
 8000678:	e19f      	b.n	80009ba <__aeabi_dadd+0x5c6>
 800067a:	4c5d      	ldr	r4, [pc, #372]	; (80007f0 <__aeabi_dadd+0x3fc>)
 800067c:	42a6      	cmp	r6, r4
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x28e>
 8000680:	e12f      	b.n	80008e2 <__aeabi_dadd+0x4ee>
 8000682:	43db      	mvns	r3, r3
 8000684:	2b38      	cmp	r3, #56	; 0x38
 8000686:	dd00      	ble.n	800068a <__aeabi_dadd+0x296>
 8000688:	e166      	b.n	8000958 <__aeabi_dadd+0x564>
 800068a:	2b1f      	cmp	r3, #31
 800068c:	dd00      	ble.n	8000690 <__aeabi_dadd+0x29c>
 800068e:	e183      	b.n	8000998 <__aeabi_dadd+0x5a4>
 8000690:	2420      	movs	r4, #32
 8000692:	0005      	movs	r5, r0
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	000f      	movs	r7, r1
 8000698:	40dd      	lsrs	r5, r3
 800069a:	40d9      	lsrs	r1, r3
 800069c:	40a0      	lsls	r0, r4
 800069e:	4643      	mov	r3, r8
 80006a0:	40a7      	lsls	r7, r4
 80006a2:	1a5b      	subs	r3, r3, r1
 80006a4:	1e44      	subs	r4, r0, #1
 80006a6:	41a0      	sbcs	r0, r4
 80006a8:	4698      	mov	r8, r3
 80006aa:	432f      	orrs	r7, r5
 80006ac:	4338      	orrs	r0, r7
 80006ae:	1a17      	subs	r7, r2, r0
 80006b0:	42ba      	cmp	r2, r7
 80006b2:	4192      	sbcs	r2, r2
 80006b4:	4643      	mov	r3, r8
 80006b6:	4252      	negs	r2, r2
 80006b8:	1a99      	subs	r1, r3, r2
 80006ba:	4664      	mov	r4, ip
 80006bc:	0035      	movs	r5, r6
 80006be:	e6ca      	b.n	8000456 <__aeabi_dadd+0x62>
 80006c0:	2207      	movs	r2, #7
 80006c2:	403a      	ands	r2, r7
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	d000      	beq.n	80006ca <__aeabi_dadd+0x2d6>
 80006c8:	e6f6      	b.n	80004b8 <__aeabi_dadd+0xc4>
 80006ca:	074b      	lsls	r3, r1, #29
 80006cc:	08ca      	lsrs	r2, r1, #3
 80006ce:	4948      	ldr	r1, [pc, #288]	; (80007f0 <__aeabi_dadd+0x3fc>)
 80006d0:	08ff      	lsrs	r7, r7, #3
 80006d2:	433b      	orrs	r3, r7
 80006d4:	428d      	cmp	r5, r1
 80006d6:	d196      	bne.n	8000606 <__aeabi_dadd+0x212>
 80006d8:	0019      	movs	r1, r3
 80006da:	4311      	orrs	r1, r2
 80006dc:	d100      	bne.n	80006e0 <__aeabi_dadd+0x2ec>
 80006de:	e19e      	b.n	8000a1e <__aeabi_dadd+0x62a>
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	0309      	lsls	r1, r1, #12
 80006e4:	430a      	orrs	r2, r1
 80006e6:	0312      	lsls	r2, r2, #12
 80006e8:	0b12      	lsrs	r2, r2, #12
 80006ea:	4d41      	ldr	r5, [pc, #260]	; (80007f0 <__aeabi_dadd+0x3fc>)
 80006ec:	e78f      	b.n	800060e <__aeabi_dadd+0x21a>
 80006ee:	0015      	movs	r5, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	2300      	movs	r3, #0
 80006f4:	e78b      	b.n	800060e <__aeabi_dadd+0x21a>
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d000      	beq.n	80006fc <__aeabi_dadd+0x308>
 80006fa:	e0c7      	b.n	800088c <__aeabi_dadd+0x498>
 80006fc:	1c6b      	adds	r3, r5, #1
 80006fe:	055f      	lsls	r7, r3, #21
 8000700:	0d7f      	lsrs	r7, r7, #21
 8000702:	2f01      	cmp	r7, #1
 8000704:	dc00      	bgt.n	8000708 <__aeabi_dadd+0x314>
 8000706:	e0f1      	b.n	80008ec <__aeabi_dadd+0x4f8>
 8000708:	4d39      	ldr	r5, [pc, #228]	; (80007f0 <__aeabi_dadd+0x3fc>)
 800070a:	42ab      	cmp	r3, r5
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x31c>
 800070e:	e0b9      	b.n	8000884 <__aeabi_dadd+0x490>
 8000710:	1885      	adds	r5, r0, r2
 8000712:	000a      	movs	r2, r1
 8000714:	4285      	cmp	r5, r0
 8000716:	4189      	sbcs	r1, r1
 8000718:	4442      	add	r2, r8
 800071a:	4249      	negs	r1, r1
 800071c:	1851      	adds	r1, r2, r1
 800071e:	2207      	movs	r2, #7
 8000720:	07cf      	lsls	r7, r1, #31
 8000722:	086d      	lsrs	r5, r5, #1
 8000724:	432f      	orrs	r7, r5
 8000726:	0849      	lsrs	r1, r1, #1
 8000728:	403a      	ands	r2, r7
 800072a:	001d      	movs	r5, r3
 800072c:	e6c2      	b.n	80004b4 <__aeabi_dadd+0xc0>
 800072e:	2207      	movs	r2, #7
 8000730:	4930      	ldr	r1, [pc, #192]	; (80007f4 <__aeabi_dadd+0x400>)
 8000732:	1aed      	subs	r5, r5, r3
 8000734:	4031      	ands	r1, r6
 8000736:	403a      	ands	r2, r7
 8000738:	e6bc      	b.n	80004b4 <__aeabi_dadd+0xc0>
 800073a:	003e      	movs	r6, r7
 800073c:	3828      	subs	r0, #40	; 0x28
 800073e:	4086      	lsls	r6, r0
 8000740:	2700      	movs	r7, #0
 8000742:	e69f      	b.n	8000484 <__aeabi_dadd+0x90>
 8000744:	0038      	movs	r0, r7
 8000746:	f000 fce3 	bl	8001110 <__clzsi2>
 800074a:	3020      	adds	r0, #32
 800074c:	e68e      	b.n	800046c <__aeabi_dadd+0x78>
 800074e:	4643      	mov	r3, r8
 8000750:	4313      	orrs	r3, r2
 8000752:	001f      	movs	r7, r3
 8000754:	1e7a      	subs	r2, r7, #1
 8000756:	4197      	sbcs	r7, r2
 8000758:	1bc7      	subs	r7, r0, r7
 800075a:	42b8      	cmp	r0, r7
 800075c:	4180      	sbcs	r0, r0
 800075e:	4240      	negs	r0, r0
 8000760:	1a09      	subs	r1, r1, r0
 8000762:	e678      	b.n	8000456 <__aeabi_dadd+0x62>
 8000764:	000e      	movs	r6, r1
 8000766:	003b      	movs	r3, r7
 8000768:	4306      	orrs	r6, r0
 800076a:	4313      	orrs	r3, r2
 800076c:	2d00      	cmp	r5, #0
 800076e:	d161      	bne.n	8000834 <__aeabi_dadd+0x440>
 8000770:	2e00      	cmp	r6, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x382>
 8000774:	e0f4      	b.n	8000960 <__aeabi_dadd+0x56c>
 8000776:	2b00      	cmp	r3, #0
 8000778:	d100      	bne.n	800077c <__aeabi_dadd+0x388>
 800077a:	e11b      	b.n	80009b4 <__aeabi_dadd+0x5c0>
 800077c:	4664      	mov	r4, ip
 800077e:	0039      	movs	r1, r7
 8000780:	0010      	movs	r0, r2
 8000782:	e739      	b.n	80005f8 <__aeabi_dadd+0x204>
 8000784:	4f1a      	ldr	r7, [pc, #104]	; (80007f0 <__aeabi_dadd+0x3fc>)
 8000786:	42bb      	cmp	r3, r7
 8000788:	d07a      	beq.n	8000880 <__aeabi_dadd+0x48c>
 800078a:	0033      	movs	r3, r6
 800078c:	e6ff      	b.n	800058e <__aeabi_dadd+0x19a>
 800078e:	0030      	movs	r0, r6
 8000790:	3d1f      	subs	r5, #31
 8000792:	40e8      	lsrs	r0, r5
 8000794:	2b20      	cmp	r3, #32
 8000796:	d003      	beq.n	80007a0 <__aeabi_dadd+0x3ac>
 8000798:	2140      	movs	r1, #64	; 0x40
 800079a:	1acb      	subs	r3, r1, r3
 800079c:	409e      	lsls	r6, r3
 800079e:	4337      	orrs	r7, r6
 80007a0:	1e7b      	subs	r3, r7, #1
 80007a2:	419f      	sbcs	r7, r3
 80007a4:	2207      	movs	r2, #7
 80007a6:	4307      	orrs	r7, r0
 80007a8:	403a      	ands	r2, r7
 80007aa:	2100      	movs	r1, #0
 80007ac:	2500      	movs	r5, #0
 80007ae:	e789      	b.n	80006c4 <__aeabi_dadd+0x2d0>
 80007b0:	1a17      	subs	r7, r2, r0
 80007b2:	4643      	mov	r3, r8
 80007b4:	42ba      	cmp	r2, r7
 80007b6:	41b6      	sbcs	r6, r6
 80007b8:	1a59      	subs	r1, r3, r1
 80007ba:	4276      	negs	r6, r6
 80007bc:	1b8e      	subs	r6, r1, r6
 80007be:	4664      	mov	r4, ip
 80007c0:	e64e      	b.n	8000460 <__aeabi_dadd+0x6c>
 80007c2:	2b1f      	cmp	r3, #31
 80007c4:	dd00      	ble.n	80007c8 <__aeabi_dadd+0x3d4>
 80007c6:	e0ad      	b.n	8000924 <__aeabi_dadd+0x530>
 80007c8:	2620      	movs	r6, #32
 80007ca:	4647      	mov	r7, r8
 80007cc:	1af6      	subs	r6, r6, r3
 80007ce:	40b7      	lsls	r7, r6
 80007d0:	46b9      	mov	r9, r7
 80007d2:	0017      	movs	r7, r2
 80007d4:	46b2      	mov	sl, r6
 80007d6:	40df      	lsrs	r7, r3
 80007d8:	464e      	mov	r6, r9
 80007da:	433e      	orrs	r6, r7
 80007dc:	0037      	movs	r7, r6
 80007de:	4656      	mov	r6, sl
 80007e0:	40b2      	lsls	r2, r6
 80007e2:	1e56      	subs	r6, r2, #1
 80007e4:	41b2      	sbcs	r2, r6
 80007e6:	4317      	orrs	r7, r2
 80007e8:	4642      	mov	r2, r8
 80007ea:	40da      	lsrs	r2, r3
 80007ec:	1889      	adds	r1, r1, r2
 80007ee:	e6ae      	b.n	800054e <__aeabi_dadd+0x15a>
 80007f0:	000007ff 	.word	0x000007ff
 80007f4:	ff7fffff 	.word	0xff7fffff
 80007f8:	800fffff 	.word	0x800fffff
 80007fc:	2620      	movs	r6, #32
 80007fe:	4647      	mov	r7, r8
 8000800:	1af6      	subs	r6, r6, r3
 8000802:	40b7      	lsls	r7, r6
 8000804:	46b9      	mov	r9, r7
 8000806:	0017      	movs	r7, r2
 8000808:	46b2      	mov	sl, r6
 800080a:	40df      	lsrs	r7, r3
 800080c:	464e      	mov	r6, r9
 800080e:	433e      	orrs	r6, r7
 8000810:	0037      	movs	r7, r6
 8000812:	4656      	mov	r6, sl
 8000814:	40b2      	lsls	r2, r6
 8000816:	1e56      	subs	r6, r2, #1
 8000818:	41b2      	sbcs	r2, r6
 800081a:	4317      	orrs	r7, r2
 800081c:	4642      	mov	r2, r8
 800081e:	40da      	lsrs	r2, r3
 8000820:	1a89      	subs	r1, r1, r2
 8000822:	e799      	b.n	8000758 <__aeabi_dadd+0x364>
 8000824:	4c7f      	ldr	r4, [pc, #508]	; (8000a24 <__aeabi_dadd+0x630>)
 8000826:	42a6      	cmp	r6, r4
 8000828:	d05b      	beq.n	80008e2 <__aeabi_dadd+0x4ee>
 800082a:	2480      	movs	r4, #128	; 0x80
 800082c:	0424      	lsls	r4, r4, #16
 800082e:	425b      	negs	r3, r3
 8000830:	4321      	orrs	r1, r4
 8000832:	e727      	b.n	8000684 <__aeabi_dadd+0x290>
 8000834:	2e00      	cmp	r6, #0
 8000836:	d10c      	bne.n	8000852 <__aeabi_dadd+0x45e>
 8000838:	2b00      	cmp	r3, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x44a>
 800083c:	e0cb      	b.n	80009d6 <__aeabi_dadd+0x5e2>
 800083e:	4664      	mov	r4, ip
 8000840:	0039      	movs	r1, r7
 8000842:	0010      	movs	r0, r2
 8000844:	4d77      	ldr	r5, [pc, #476]	; (8000a24 <__aeabi_dadd+0x630>)
 8000846:	e6d7      	b.n	80005f8 <__aeabi_dadd+0x204>
 8000848:	4f76      	ldr	r7, [pc, #472]	; (8000a24 <__aeabi_dadd+0x630>)
 800084a:	42bb      	cmp	r3, r7
 800084c:	d018      	beq.n	8000880 <__aeabi_dadd+0x48c>
 800084e:	0033      	movs	r3, r6
 8000850:	e675      	b.n	800053e <__aeabi_dadd+0x14a>
 8000852:	2b00      	cmp	r3, #0
 8000854:	d014      	beq.n	8000880 <__aeabi_dadd+0x48c>
 8000856:	074b      	lsls	r3, r1, #29
 8000858:	08c0      	lsrs	r0, r0, #3
 800085a:	4318      	orrs	r0, r3
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	08c9      	lsrs	r1, r1, #3
 8000860:	031b      	lsls	r3, r3, #12
 8000862:	4219      	tst	r1, r3
 8000864:	d007      	beq.n	8000876 <__aeabi_dadd+0x482>
 8000866:	08fc      	lsrs	r4, r7, #3
 8000868:	421c      	tst	r4, r3
 800086a:	d104      	bne.n	8000876 <__aeabi_dadd+0x482>
 800086c:	0779      	lsls	r1, r7, #29
 800086e:	08d0      	lsrs	r0, r2, #3
 8000870:	4308      	orrs	r0, r1
 8000872:	46e1      	mov	r9, ip
 8000874:	0021      	movs	r1, r4
 8000876:	464c      	mov	r4, r9
 8000878:	0f42      	lsrs	r2, r0, #29
 800087a:	00c9      	lsls	r1, r1, #3
 800087c:	4311      	orrs	r1, r2
 800087e:	00c0      	lsls	r0, r0, #3
 8000880:	4d68      	ldr	r5, [pc, #416]	; (8000a24 <__aeabi_dadd+0x630>)
 8000882:	e6b9      	b.n	80005f8 <__aeabi_dadd+0x204>
 8000884:	001d      	movs	r5, r3
 8000886:	2200      	movs	r2, #0
 8000888:	2300      	movs	r3, #0
 800088a:	e6c0      	b.n	800060e <__aeabi_dadd+0x21a>
 800088c:	2d00      	cmp	r5, #0
 800088e:	d15b      	bne.n	8000948 <__aeabi_dadd+0x554>
 8000890:	000d      	movs	r5, r1
 8000892:	4305      	orrs	r5, r0
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x4a4>
 8000896:	e6e2      	b.n	800065e <__aeabi_dadd+0x26a>
 8000898:	1c5d      	adds	r5, r3, #1
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x4aa>
 800089c:	e0b0      	b.n	8000a00 <__aeabi_dadd+0x60c>
 800089e:	4d61      	ldr	r5, [pc, #388]	; (8000a24 <__aeabi_dadd+0x630>)
 80008a0:	42ae      	cmp	r6, r5
 80008a2:	d01f      	beq.n	80008e4 <__aeabi_dadd+0x4f0>
 80008a4:	43db      	mvns	r3, r3
 80008a6:	2b38      	cmp	r3, #56	; 0x38
 80008a8:	dc71      	bgt.n	800098e <__aeabi_dadd+0x59a>
 80008aa:	2b1f      	cmp	r3, #31
 80008ac:	dd00      	ble.n	80008b0 <__aeabi_dadd+0x4bc>
 80008ae:	e096      	b.n	80009de <__aeabi_dadd+0x5ea>
 80008b0:	2520      	movs	r5, #32
 80008b2:	000f      	movs	r7, r1
 80008b4:	1aed      	subs	r5, r5, r3
 80008b6:	40af      	lsls	r7, r5
 80008b8:	46b9      	mov	r9, r7
 80008ba:	0007      	movs	r7, r0
 80008bc:	46aa      	mov	sl, r5
 80008be:	40df      	lsrs	r7, r3
 80008c0:	464d      	mov	r5, r9
 80008c2:	433d      	orrs	r5, r7
 80008c4:	002f      	movs	r7, r5
 80008c6:	4655      	mov	r5, sl
 80008c8:	40a8      	lsls	r0, r5
 80008ca:	40d9      	lsrs	r1, r3
 80008cc:	1e45      	subs	r5, r0, #1
 80008ce:	41a8      	sbcs	r0, r5
 80008d0:	4488      	add	r8, r1
 80008d2:	4307      	orrs	r7, r0
 80008d4:	18bf      	adds	r7, r7, r2
 80008d6:	4297      	cmp	r7, r2
 80008d8:	4192      	sbcs	r2, r2
 80008da:	4251      	negs	r1, r2
 80008dc:	4441      	add	r1, r8
 80008de:	0035      	movs	r5, r6
 80008e0:	e63a      	b.n	8000558 <__aeabi_dadd+0x164>
 80008e2:	4664      	mov	r4, ip
 80008e4:	0035      	movs	r5, r6
 80008e6:	4641      	mov	r1, r8
 80008e8:	0010      	movs	r0, r2
 80008ea:	e685      	b.n	80005f8 <__aeabi_dadd+0x204>
 80008ec:	000b      	movs	r3, r1
 80008ee:	4303      	orrs	r3, r0
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d000      	beq.n	80008f6 <__aeabi_dadd+0x502>
 80008f4:	e663      	b.n	80005be <__aeabi_dadd+0x1ca>
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d0f5      	beq.n	80008e6 <__aeabi_dadd+0x4f2>
 80008fa:	4643      	mov	r3, r8
 80008fc:	4313      	orrs	r3, r2
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x50e>
 8000900:	e67a      	b.n	80005f8 <__aeabi_dadd+0x204>
 8000902:	1887      	adds	r7, r0, r2
 8000904:	4287      	cmp	r7, r0
 8000906:	4180      	sbcs	r0, r0
 8000908:	2207      	movs	r2, #7
 800090a:	4441      	add	r1, r8
 800090c:	4240      	negs	r0, r0
 800090e:	1809      	adds	r1, r1, r0
 8000910:	403a      	ands	r2, r7
 8000912:	020b      	lsls	r3, r1, #8
 8000914:	d400      	bmi.n	8000918 <__aeabi_dadd+0x524>
 8000916:	e6d5      	b.n	80006c4 <__aeabi_dadd+0x2d0>
 8000918:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <__aeabi_dadd+0x634>)
 800091a:	3501      	adds	r5, #1
 800091c:	4019      	ands	r1, r3
 800091e:	e5c9      	b.n	80004b4 <__aeabi_dadd+0xc0>
 8000920:	0038      	movs	r0, r7
 8000922:	e669      	b.n	80005f8 <__aeabi_dadd+0x204>
 8000924:	001e      	movs	r6, r3
 8000926:	4647      	mov	r7, r8
 8000928:	3e20      	subs	r6, #32
 800092a:	40f7      	lsrs	r7, r6
 800092c:	46bc      	mov	ip, r7
 800092e:	2b20      	cmp	r3, #32
 8000930:	d004      	beq.n	800093c <__aeabi_dadd+0x548>
 8000932:	2640      	movs	r6, #64	; 0x40
 8000934:	1af3      	subs	r3, r6, r3
 8000936:	4646      	mov	r6, r8
 8000938:	409e      	lsls	r6, r3
 800093a:	4332      	orrs	r2, r6
 800093c:	0017      	movs	r7, r2
 800093e:	4663      	mov	r3, ip
 8000940:	1e7a      	subs	r2, r7, #1
 8000942:	4197      	sbcs	r7, r2
 8000944:	431f      	orrs	r7, r3
 8000946:	e602      	b.n	800054e <__aeabi_dadd+0x15a>
 8000948:	4d36      	ldr	r5, [pc, #216]	; (8000a24 <__aeabi_dadd+0x630>)
 800094a:	42ae      	cmp	r6, r5
 800094c:	d0ca      	beq.n	80008e4 <__aeabi_dadd+0x4f0>
 800094e:	2580      	movs	r5, #128	; 0x80
 8000950:	042d      	lsls	r5, r5, #16
 8000952:	425b      	negs	r3, r3
 8000954:	4329      	orrs	r1, r5
 8000956:	e7a6      	b.n	80008a6 <__aeabi_dadd+0x4b2>
 8000958:	4308      	orrs	r0, r1
 800095a:	1e41      	subs	r1, r0, #1
 800095c:	4188      	sbcs	r0, r1
 800095e:	e6a6      	b.n	80006ae <__aeabi_dadd+0x2ba>
 8000960:	2b00      	cmp	r3, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_dadd+0x572>
 8000964:	e648      	b.n	80005f8 <__aeabi_dadd+0x204>
 8000966:	1a87      	subs	r7, r0, r2
 8000968:	4643      	mov	r3, r8
 800096a:	42b8      	cmp	r0, r7
 800096c:	41b6      	sbcs	r6, r6
 800096e:	1acb      	subs	r3, r1, r3
 8000970:	4276      	negs	r6, r6
 8000972:	1b9e      	subs	r6, r3, r6
 8000974:	0233      	lsls	r3, r6, #8
 8000976:	d54b      	bpl.n	8000a10 <__aeabi_dadd+0x61c>
 8000978:	1a17      	subs	r7, r2, r0
 800097a:	4643      	mov	r3, r8
 800097c:	42ba      	cmp	r2, r7
 800097e:	4192      	sbcs	r2, r2
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	4252      	negs	r2, r2
 8000984:	1a89      	subs	r1, r1, r2
 8000986:	2207      	movs	r2, #7
 8000988:	4664      	mov	r4, ip
 800098a:	403a      	ands	r2, r7
 800098c:	e592      	b.n	80004b4 <__aeabi_dadd+0xc0>
 800098e:	4301      	orrs	r1, r0
 8000990:	000f      	movs	r7, r1
 8000992:	1e79      	subs	r1, r7, #1
 8000994:	418f      	sbcs	r7, r1
 8000996:	e79d      	b.n	80008d4 <__aeabi_dadd+0x4e0>
 8000998:	001c      	movs	r4, r3
 800099a:	000f      	movs	r7, r1
 800099c:	3c20      	subs	r4, #32
 800099e:	40e7      	lsrs	r7, r4
 80009a0:	2b20      	cmp	r3, #32
 80009a2:	d003      	beq.n	80009ac <__aeabi_dadd+0x5b8>
 80009a4:	2440      	movs	r4, #64	; 0x40
 80009a6:	1ae3      	subs	r3, r4, r3
 80009a8:	4099      	lsls	r1, r3
 80009aa:	4308      	orrs	r0, r1
 80009ac:	1e41      	subs	r1, r0, #1
 80009ae:	4188      	sbcs	r0, r1
 80009b0:	4338      	orrs	r0, r7
 80009b2:	e67c      	b.n	80006ae <__aeabi_dadd+0x2ba>
 80009b4:	2200      	movs	r2, #0
 80009b6:	2400      	movs	r4, #0
 80009b8:	e625      	b.n	8000606 <__aeabi_dadd+0x212>
 80009ba:	1a17      	subs	r7, r2, r0
 80009bc:	4643      	mov	r3, r8
 80009be:	42ba      	cmp	r2, r7
 80009c0:	4192      	sbcs	r2, r2
 80009c2:	1a59      	subs	r1, r3, r1
 80009c4:	4252      	negs	r2, r2
 80009c6:	1a89      	subs	r1, r1, r2
 80009c8:	4664      	mov	r4, ip
 80009ca:	0035      	movs	r5, r6
 80009cc:	e543      	b.n	8000456 <__aeabi_dadd+0x62>
 80009ce:	4641      	mov	r1, r8
 80009d0:	0010      	movs	r0, r2
 80009d2:	4d14      	ldr	r5, [pc, #80]	; (8000a24 <__aeabi_dadd+0x630>)
 80009d4:	e610      	b.n	80005f8 <__aeabi_dadd+0x204>
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	2400      	movs	r4, #0
 80009da:	0312      	lsls	r2, r2, #12
 80009dc:	e680      	b.n	80006e0 <__aeabi_dadd+0x2ec>
 80009de:	001d      	movs	r5, r3
 80009e0:	000f      	movs	r7, r1
 80009e2:	3d20      	subs	r5, #32
 80009e4:	40ef      	lsrs	r7, r5
 80009e6:	46bc      	mov	ip, r7
 80009e8:	2b20      	cmp	r3, #32
 80009ea:	d003      	beq.n	80009f4 <__aeabi_dadd+0x600>
 80009ec:	2540      	movs	r5, #64	; 0x40
 80009ee:	1aeb      	subs	r3, r5, r3
 80009f0:	4099      	lsls	r1, r3
 80009f2:	4308      	orrs	r0, r1
 80009f4:	0007      	movs	r7, r0
 80009f6:	4663      	mov	r3, ip
 80009f8:	1e78      	subs	r0, r7, #1
 80009fa:	4187      	sbcs	r7, r0
 80009fc:	431f      	orrs	r7, r3
 80009fe:	e769      	b.n	80008d4 <__aeabi_dadd+0x4e0>
 8000a00:	1887      	adds	r7, r0, r2
 8000a02:	4297      	cmp	r7, r2
 8000a04:	419b      	sbcs	r3, r3
 8000a06:	4441      	add	r1, r8
 8000a08:	425b      	negs	r3, r3
 8000a0a:	18c9      	adds	r1, r1, r3
 8000a0c:	0035      	movs	r5, r6
 8000a0e:	e5a3      	b.n	8000558 <__aeabi_dadd+0x164>
 8000a10:	003b      	movs	r3, r7
 8000a12:	4333      	orrs	r3, r6
 8000a14:	d0ce      	beq.n	80009b4 <__aeabi_dadd+0x5c0>
 8000a16:	2207      	movs	r2, #7
 8000a18:	0031      	movs	r1, r6
 8000a1a:	403a      	ands	r2, r7
 8000a1c:	e652      	b.n	80006c4 <__aeabi_dadd+0x2d0>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	001a      	movs	r2, r3
 8000a22:	e5f4      	b.n	800060e <__aeabi_dadd+0x21a>
 8000a24:	000007ff 	.word	0x000007ff
 8000a28:	ff7fffff 	.word	0xff7fffff

08000a2c <__aeabi_ddiv>:
 8000a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2e:	4657      	mov	r7, sl
 8000a30:	46de      	mov	lr, fp
 8000a32:	464e      	mov	r6, r9
 8000a34:	4645      	mov	r5, r8
 8000a36:	b5e0      	push	{r5, r6, r7, lr}
 8000a38:	4683      	mov	fp, r0
 8000a3a:	0007      	movs	r7, r0
 8000a3c:	030e      	lsls	r6, r1, #12
 8000a3e:	0048      	lsls	r0, r1, #1
 8000a40:	b085      	sub	sp, #20
 8000a42:	4692      	mov	sl, r2
 8000a44:	001c      	movs	r4, r3
 8000a46:	0b36      	lsrs	r6, r6, #12
 8000a48:	0d40      	lsrs	r0, r0, #21
 8000a4a:	0fcd      	lsrs	r5, r1, #31
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_ddiv+0x26>
 8000a50:	e09d      	b.n	8000b8e <__aeabi_ddiv+0x162>
 8000a52:	4b95      	ldr	r3, [pc, #596]	; (8000ca8 <__aeabi_ddiv+0x27c>)
 8000a54:	4298      	cmp	r0, r3
 8000a56:	d039      	beq.n	8000acc <__aeabi_ddiv+0xa0>
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	00f6      	lsls	r6, r6, #3
 8000a5c:	041b      	lsls	r3, r3, #16
 8000a5e:	431e      	orrs	r6, r3
 8000a60:	4a92      	ldr	r2, [pc, #584]	; (8000cac <__aeabi_ddiv+0x280>)
 8000a62:	0f7b      	lsrs	r3, r7, #29
 8000a64:	4333      	orrs	r3, r6
 8000a66:	4699      	mov	r9, r3
 8000a68:	4694      	mov	ip, r2
 8000a6a:	0003      	movs	r3, r0
 8000a6c:	4463      	add	r3, ip
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2300      	movs	r3, #0
 8000a72:	2600      	movs	r6, #0
 8000a74:	00ff      	lsls	r7, r7, #3
 8000a76:	9302      	str	r3, [sp, #8]
 8000a78:	0323      	lsls	r3, r4, #12
 8000a7a:	0b1b      	lsrs	r3, r3, #12
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	0063      	lsls	r3, r4, #1
 8000a80:	0fe4      	lsrs	r4, r4, #31
 8000a82:	4652      	mov	r2, sl
 8000a84:	0d5b      	lsrs	r3, r3, #21
 8000a86:	9401      	str	r4, [sp, #4]
 8000a88:	d100      	bne.n	8000a8c <__aeabi_ddiv+0x60>
 8000a8a:	e0b3      	b.n	8000bf4 <__aeabi_ddiv+0x1c8>
 8000a8c:	4986      	ldr	r1, [pc, #536]	; (8000ca8 <__aeabi_ddiv+0x27c>)
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_ddiv+0x68>
 8000a92:	e09e      	b.n	8000bd2 <__aeabi_ddiv+0x1a6>
 8000a94:	4642      	mov	r2, r8
 8000a96:	00d1      	lsls	r1, r2, #3
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	0412      	lsls	r2, r2, #16
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	4651      	mov	r1, sl
 8000aa0:	0f49      	lsrs	r1, r1, #29
 8000aa2:	4311      	orrs	r1, r2
 8000aa4:	468b      	mov	fp, r1
 8000aa6:	4981      	ldr	r1, [pc, #516]	; (8000cac <__aeabi_ddiv+0x280>)
 8000aa8:	4652      	mov	r2, sl
 8000aaa:	468c      	mov	ip, r1
 8000aac:	9900      	ldr	r1, [sp, #0]
 8000aae:	4463      	add	r3, ip
 8000ab0:	1acb      	subs	r3, r1, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	00d2      	lsls	r2, r2, #3
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	002b      	movs	r3, r5
 8000aba:	4063      	eors	r3, r4
 8000abc:	469a      	mov	sl, r3
 8000abe:	2e0f      	cmp	r6, #15
 8000ac0:	d900      	bls.n	8000ac4 <__aeabi_ddiv+0x98>
 8000ac2:	e105      	b.n	8000cd0 <__aeabi_ddiv+0x2a4>
 8000ac4:	4b7a      	ldr	r3, [pc, #488]	; (8000cb0 <__aeabi_ddiv+0x284>)
 8000ac6:	00b6      	lsls	r6, r6, #2
 8000ac8:	599b      	ldr	r3, [r3, r6]
 8000aca:	469f      	mov	pc, r3
 8000acc:	465b      	mov	r3, fp
 8000ace:	4333      	orrs	r3, r6
 8000ad0:	4699      	mov	r9, r3
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_ddiv+0xaa>
 8000ad4:	e0b8      	b.n	8000c48 <__aeabi_ddiv+0x21c>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	2608      	movs	r6, #8
 8000ada:	2700      	movs	r7, #0
 8000adc:	9000      	str	r0, [sp, #0]
 8000ade:	9302      	str	r3, [sp, #8]
 8000ae0:	e7ca      	b.n	8000a78 <__aeabi_ddiv+0x4c>
 8000ae2:	46cb      	mov	fp, r9
 8000ae4:	003a      	movs	r2, r7
 8000ae6:	9902      	ldr	r1, [sp, #8]
 8000ae8:	9501      	str	r5, [sp, #4]
 8000aea:	9b01      	ldr	r3, [sp, #4]
 8000aec:	469a      	mov	sl, r3
 8000aee:	2902      	cmp	r1, #2
 8000af0:	d027      	beq.n	8000b42 <__aeabi_ddiv+0x116>
 8000af2:	2903      	cmp	r1, #3
 8000af4:	d100      	bne.n	8000af8 <__aeabi_ddiv+0xcc>
 8000af6:	e280      	b.n	8000ffa <__aeabi_ddiv+0x5ce>
 8000af8:	2901      	cmp	r1, #1
 8000afa:	d044      	beq.n	8000b86 <__aeabi_ddiv+0x15a>
 8000afc:	496d      	ldr	r1, [pc, #436]	; (8000cb4 <__aeabi_ddiv+0x288>)
 8000afe:	9b00      	ldr	r3, [sp, #0]
 8000b00:	468c      	mov	ip, r1
 8000b02:	4463      	add	r3, ip
 8000b04:	001c      	movs	r4, r3
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	dd38      	ble.n	8000b7c <__aeabi_ddiv+0x150>
 8000b0a:	0753      	lsls	r3, r2, #29
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_ddiv+0xe4>
 8000b0e:	e213      	b.n	8000f38 <__aeabi_ddiv+0x50c>
 8000b10:	08d2      	lsrs	r2, r2, #3
 8000b12:	465b      	mov	r3, fp
 8000b14:	01db      	lsls	r3, r3, #7
 8000b16:	d509      	bpl.n	8000b2c <__aeabi_ddiv+0x100>
 8000b18:	4659      	mov	r1, fp
 8000b1a:	4b67      	ldr	r3, [pc, #412]	; (8000cb8 <__aeabi_ddiv+0x28c>)
 8000b1c:	4019      	ands	r1, r3
 8000b1e:	468b      	mov	fp, r1
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	00c9      	lsls	r1, r1, #3
 8000b24:	468c      	mov	ip, r1
 8000b26:	9b00      	ldr	r3, [sp, #0]
 8000b28:	4463      	add	r3, ip
 8000b2a:	001c      	movs	r4, r3
 8000b2c:	4b63      	ldr	r3, [pc, #396]	; (8000cbc <__aeabi_ddiv+0x290>)
 8000b2e:	429c      	cmp	r4, r3
 8000b30:	dc07      	bgt.n	8000b42 <__aeabi_ddiv+0x116>
 8000b32:	465b      	mov	r3, fp
 8000b34:	0564      	lsls	r4, r4, #21
 8000b36:	075f      	lsls	r7, r3, #29
 8000b38:	025b      	lsls	r3, r3, #9
 8000b3a:	4317      	orrs	r7, r2
 8000b3c:	0b1b      	lsrs	r3, r3, #12
 8000b3e:	0d62      	lsrs	r2, r4, #21
 8000b40:	e002      	b.n	8000b48 <__aeabi_ddiv+0x11c>
 8000b42:	2300      	movs	r3, #0
 8000b44:	2700      	movs	r7, #0
 8000b46:	4a58      	ldr	r2, [pc, #352]	; (8000ca8 <__aeabi_ddiv+0x27c>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	031b      	lsls	r3, r3, #12
 8000b4c:	0b1c      	lsrs	r4, r3, #12
 8000b4e:	0d0b      	lsrs	r3, r1, #20
 8000b50:	051b      	lsls	r3, r3, #20
 8000b52:	4323      	orrs	r3, r4
 8000b54:	0514      	lsls	r4, r2, #20
 8000b56:	4a5a      	ldr	r2, [pc, #360]	; (8000cc0 <__aeabi_ddiv+0x294>)
 8000b58:	0038      	movs	r0, r7
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	431c      	orrs	r4, r3
 8000b5e:	4653      	mov	r3, sl
 8000b60:	0064      	lsls	r4, r4, #1
 8000b62:	07db      	lsls	r3, r3, #31
 8000b64:	0864      	lsrs	r4, r4, #1
 8000b66:	431c      	orrs	r4, r3
 8000b68:	0021      	movs	r1, r4
 8000b6a:	b005      	add	sp, #20
 8000b6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000b6e:	4690      	mov	r8, r2
 8000b70:	4699      	mov	r9, r3
 8000b72:	46a2      	mov	sl, r4
 8000b74:	46ab      	mov	fp, r5
 8000b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4252      	negs	r2, r2
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	1b1b      	subs	r3, r3, r4
 8000b80:	2b38      	cmp	r3, #56	; 0x38
 8000b82:	dc00      	bgt.n	8000b86 <__aeabi_ddiv+0x15a>
 8000b84:	e1ad      	b.n	8000ee2 <__aeabi_ddiv+0x4b6>
 8000b86:	2200      	movs	r2, #0
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2700      	movs	r7, #0
 8000b8c:	e7dc      	b.n	8000b48 <__aeabi_ddiv+0x11c>
 8000b8e:	465b      	mov	r3, fp
 8000b90:	4333      	orrs	r3, r6
 8000b92:	4699      	mov	r9, r3
 8000b94:	d05e      	beq.n	8000c54 <__aeabi_ddiv+0x228>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d100      	bne.n	8000b9c <__aeabi_ddiv+0x170>
 8000b9a:	e18a      	b.n	8000eb2 <__aeabi_ddiv+0x486>
 8000b9c:	0030      	movs	r0, r6
 8000b9e:	f000 fab7 	bl	8001110 <__clzsi2>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	3b0b      	subs	r3, #11
 8000ba6:	2b1c      	cmp	r3, #28
 8000ba8:	dd00      	ble.n	8000bac <__aeabi_ddiv+0x180>
 8000baa:	e17b      	b.n	8000ea4 <__aeabi_ddiv+0x478>
 8000bac:	221d      	movs	r2, #29
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	465a      	mov	r2, fp
 8000bb2:	0001      	movs	r1, r0
 8000bb4:	40da      	lsrs	r2, r3
 8000bb6:	3908      	subs	r1, #8
 8000bb8:	408e      	lsls	r6, r1
 8000bba:	0013      	movs	r3, r2
 8000bbc:	465f      	mov	r7, fp
 8000bbe:	4333      	orrs	r3, r6
 8000bc0:	4699      	mov	r9, r3
 8000bc2:	408f      	lsls	r7, r1
 8000bc4:	4b3f      	ldr	r3, [pc, #252]	; (8000cc4 <__aeabi_ddiv+0x298>)
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	1a1b      	subs	r3, r3, r0
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2300      	movs	r3, #0
 8000bce:	9302      	str	r3, [sp, #8]
 8000bd0:	e752      	b.n	8000a78 <__aeabi_ddiv+0x4c>
 8000bd2:	4641      	mov	r1, r8
 8000bd4:	4653      	mov	r3, sl
 8000bd6:	430b      	orrs	r3, r1
 8000bd8:	493b      	ldr	r1, [pc, #236]	; (8000cc8 <__aeabi_ddiv+0x29c>)
 8000bda:	469b      	mov	fp, r3
 8000bdc:	468c      	mov	ip, r1
 8000bde:	9b00      	ldr	r3, [sp, #0]
 8000be0:	4463      	add	r3, ip
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	465b      	mov	r3, fp
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d13b      	bne.n	8000c62 <__aeabi_ddiv+0x236>
 8000bea:	2302      	movs	r3, #2
 8000bec:	2200      	movs	r2, #0
 8000bee:	431e      	orrs	r6, r3
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	e761      	b.n	8000ab8 <__aeabi_ddiv+0x8c>
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	469b      	mov	fp, r3
 8000bfa:	d037      	beq.n	8000c6c <__aeabi_ddiv+0x240>
 8000bfc:	4643      	mov	r3, r8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_ddiv+0x1d8>
 8000c02:	e162      	b.n	8000eca <__aeabi_ddiv+0x49e>
 8000c04:	4640      	mov	r0, r8
 8000c06:	f000 fa83 	bl	8001110 <__clzsi2>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	3b0b      	subs	r3, #11
 8000c0e:	2b1c      	cmp	r3, #28
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_ddiv+0x1e8>
 8000c12:	e153      	b.n	8000ebc <__aeabi_ddiv+0x490>
 8000c14:	0002      	movs	r2, r0
 8000c16:	4641      	mov	r1, r8
 8000c18:	3a08      	subs	r2, #8
 8000c1a:	4091      	lsls	r1, r2
 8000c1c:	4688      	mov	r8, r1
 8000c1e:	211d      	movs	r1, #29
 8000c20:	1acb      	subs	r3, r1, r3
 8000c22:	4651      	mov	r1, sl
 8000c24:	40d9      	lsrs	r1, r3
 8000c26:	000b      	movs	r3, r1
 8000c28:	4641      	mov	r1, r8
 8000c2a:	430b      	orrs	r3, r1
 8000c2c:	469b      	mov	fp, r3
 8000c2e:	4653      	mov	r3, sl
 8000c30:	4093      	lsls	r3, r2
 8000c32:	001a      	movs	r2, r3
 8000c34:	9b00      	ldr	r3, [sp, #0]
 8000c36:	4925      	ldr	r1, [pc, #148]	; (8000ccc <__aeabi_ddiv+0x2a0>)
 8000c38:	469c      	mov	ip, r3
 8000c3a:	4460      	add	r0, ip
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	468c      	mov	ip, r1
 8000c40:	4463      	add	r3, ip
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2100      	movs	r1, #0
 8000c46:	e737      	b.n	8000ab8 <__aeabi_ddiv+0x8c>
 8000c48:	2303      	movs	r3, #3
 8000c4a:	46b1      	mov	r9, r6
 8000c4c:	9000      	str	r0, [sp, #0]
 8000c4e:	260c      	movs	r6, #12
 8000c50:	9302      	str	r3, [sp, #8]
 8000c52:	e711      	b.n	8000a78 <__aeabi_ddiv+0x4c>
 8000c54:	2300      	movs	r3, #0
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	2604      	movs	r6, #4
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	9302      	str	r3, [sp, #8]
 8000c60:	e70a      	b.n	8000a78 <__aeabi_ddiv+0x4c>
 8000c62:	2303      	movs	r3, #3
 8000c64:	46c3      	mov	fp, r8
 8000c66:	431e      	orrs	r6, r3
 8000c68:	2103      	movs	r1, #3
 8000c6a:	e725      	b.n	8000ab8 <__aeabi_ddiv+0x8c>
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	431e      	orrs	r6, r3
 8000c70:	2200      	movs	r2, #0
 8000c72:	2101      	movs	r1, #1
 8000c74:	e720      	b.n	8000ab8 <__aeabi_ddiv+0x8c>
 8000c76:	2300      	movs	r3, #0
 8000c78:	469a      	mov	sl, r3
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	031b      	lsls	r3, r3, #12
 8000c80:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <__aeabi_ddiv+0x27c>)
 8000c82:	e761      	b.n	8000b48 <__aeabi_ddiv+0x11c>
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	4649      	mov	r1, r9
 8000c88:	031b      	lsls	r3, r3, #12
 8000c8a:	4219      	tst	r1, r3
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_ddiv+0x264>
 8000c8e:	e0e2      	b.n	8000e56 <__aeabi_ddiv+0x42a>
 8000c90:	4659      	mov	r1, fp
 8000c92:	4219      	tst	r1, r3
 8000c94:	d000      	beq.n	8000c98 <__aeabi_ddiv+0x26c>
 8000c96:	e0de      	b.n	8000e56 <__aeabi_ddiv+0x42a>
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	031b      	lsls	r3, r3, #12
 8000c9c:	0017      	movs	r7, r2
 8000c9e:	0b1b      	lsrs	r3, r3, #12
 8000ca0:	46a2      	mov	sl, r4
 8000ca2:	4a01      	ldr	r2, [pc, #4]	; (8000ca8 <__aeabi_ddiv+0x27c>)
 8000ca4:	e750      	b.n	8000b48 <__aeabi_ddiv+0x11c>
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	000007ff 	.word	0x000007ff
 8000cac:	fffffc01 	.word	0xfffffc01
 8000cb0:	08003da0 	.word	0x08003da0
 8000cb4:	000003ff 	.word	0x000003ff
 8000cb8:	feffffff 	.word	0xfeffffff
 8000cbc:	000007fe 	.word	0x000007fe
 8000cc0:	800fffff 	.word	0x800fffff
 8000cc4:	fffffc0d 	.word	0xfffffc0d
 8000cc8:	fffff801 	.word	0xfffff801
 8000ccc:	000003f3 	.word	0x000003f3
 8000cd0:	45d9      	cmp	r9, fp
 8000cd2:	d900      	bls.n	8000cd6 <__aeabi_ddiv+0x2aa>
 8000cd4:	e0cb      	b.n	8000e6e <__aeabi_ddiv+0x442>
 8000cd6:	d100      	bne.n	8000cda <__aeabi_ddiv+0x2ae>
 8000cd8:	e0c6      	b.n	8000e68 <__aeabi_ddiv+0x43c>
 8000cda:	003c      	movs	r4, r7
 8000cdc:	4648      	mov	r0, r9
 8000cde:	2700      	movs	r7, #0
 8000ce0:	9b00      	ldr	r3, [sp, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	465b      	mov	r3, fp
 8000ce8:	0e16      	lsrs	r6, r2, #24
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	431e      	orrs	r6, r3
 8000cee:	0213      	lsls	r3, r2, #8
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	0433      	lsls	r3, r6, #16
 8000cf4:	0c1b      	lsrs	r3, r3, #16
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	0c31      	lsrs	r1, r6, #16
 8000cfa:	9101      	str	r1, [sp, #4]
 8000cfc:	f7ff fa8a 	bl	8000214 <__aeabi_uidivmod>
 8000d00:	464a      	mov	r2, r9
 8000d02:	4342      	muls	r2, r0
 8000d04:	040b      	lsls	r3, r1, #16
 8000d06:	0c21      	lsrs	r1, r4, #16
 8000d08:	0005      	movs	r5, r0
 8000d0a:	4319      	orrs	r1, r3
 8000d0c:	428a      	cmp	r2, r1
 8000d0e:	d907      	bls.n	8000d20 <__aeabi_ddiv+0x2f4>
 8000d10:	1989      	adds	r1, r1, r6
 8000d12:	3d01      	subs	r5, #1
 8000d14:	428e      	cmp	r6, r1
 8000d16:	d803      	bhi.n	8000d20 <__aeabi_ddiv+0x2f4>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	d901      	bls.n	8000d20 <__aeabi_ddiv+0x2f4>
 8000d1c:	1e85      	subs	r5, r0, #2
 8000d1e:	1989      	adds	r1, r1, r6
 8000d20:	1a88      	subs	r0, r1, r2
 8000d22:	9901      	ldr	r1, [sp, #4]
 8000d24:	f7ff fa76 	bl	8000214 <__aeabi_uidivmod>
 8000d28:	0409      	lsls	r1, r1, #16
 8000d2a:	468c      	mov	ip, r1
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	0421      	lsls	r1, r4, #16
 8000d30:	4664      	mov	r4, ip
 8000d32:	4342      	muls	r2, r0
 8000d34:	0c09      	lsrs	r1, r1, #16
 8000d36:	0003      	movs	r3, r0
 8000d38:	4321      	orrs	r1, r4
 8000d3a:	428a      	cmp	r2, r1
 8000d3c:	d904      	bls.n	8000d48 <__aeabi_ddiv+0x31c>
 8000d3e:	1989      	adds	r1, r1, r6
 8000d40:	3b01      	subs	r3, #1
 8000d42:	428e      	cmp	r6, r1
 8000d44:	d800      	bhi.n	8000d48 <__aeabi_ddiv+0x31c>
 8000d46:	e0f1      	b.n	8000f2c <__aeabi_ddiv+0x500>
 8000d48:	042d      	lsls	r5, r5, #16
 8000d4a:	431d      	orrs	r5, r3
 8000d4c:	46ab      	mov	fp, r5
 8000d4e:	4643      	mov	r3, r8
 8000d50:	1a89      	subs	r1, r1, r2
 8000d52:	4642      	mov	r2, r8
 8000d54:	0c28      	lsrs	r0, r5, #16
 8000d56:	0412      	lsls	r2, r2, #16
 8000d58:	0c1d      	lsrs	r5, r3, #16
 8000d5a:	465b      	mov	r3, fp
 8000d5c:	0c14      	lsrs	r4, r2, #16
 8000d5e:	0022      	movs	r2, r4
 8000d60:	041b      	lsls	r3, r3, #16
 8000d62:	0c1b      	lsrs	r3, r3, #16
 8000d64:	435a      	muls	r2, r3
 8000d66:	9403      	str	r4, [sp, #12]
 8000d68:	436b      	muls	r3, r5
 8000d6a:	4344      	muls	r4, r0
 8000d6c:	9502      	str	r5, [sp, #8]
 8000d6e:	4368      	muls	r0, r5
 8000d70:	191b      	adds	r3, r3, r4
 8000d72:	0c15      	lsrs	r5, r2, #16
 8000d74:	18eb      	adds	r3, r5, r3
 8000d76:	429c      	cmp	r4, r3
 8000d78:	d903      	bls.n	8000d82 <__aeabi_ddiv+0x356>
 8000d7a:	2480      	movs	r4, #128	; 0x80
 8000d7c:	0264      	lsls	r4, r4, #9
 8000d7e:	46a4      	mov	ip, r4
 8000d80:	4460      	add	r0, ip
 8000d82:	0c1c      	lsrs	r4, r3, #16
 8000d84:	0415      	lsls	r5, r2, #16
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	0c2d      	lsrs	r5, r5, #16
 8000d8a:	1820      	adds	r0, r4, r0
 8000d8c:	195d      	adds	r5, r3, r5
 8000d8e:	4281      	cmp	r1, r0
 8000d90:	d377      	bcc.n	8000e82 <__aeabi_ddiv+0x456>
 8000d92:	d073      	beq.n	8000e7c <__aeabi_ddiv+0x450>
 8000d94:	1a0c      	subs	r4, r1, r0
 8000d96:	4aa2      	ldr	r2, [pc, #648]	; (8001020 <__aeabi_ddiv+0x5f4>)
 8000d98:	1b7d      	subs	r5, r7, r5
 8000d9a:	42af      	cmp	r7, r5
 8000d9c:	41bf      	sbcs	r7, r7
 8000d9e:	4694      	mov	ip, r2
 8000da0:	9b00      	ldr	r3, [sp, #0]
 8000da2:	427f      	negs	r7, r7
 8000da4:	4463      	add	r3, ip
 8000da6:	1be0      	subs	r0, r4, r7
 8000da8:	001c      	movs	r4, r3
 8000daa:	4286      	cmp	r6, r0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_ddiv+0x384>
 8000dae:	e0db      	b.n	8000f68 <__aeabi_ddiv+0x53c>
 8000db0:	9901      	ldr	r1, [sp, #4]
 8000db2:	f7ff fa2f 	bl	8000214 <__aeabi_uidivmod>
 8000db6:	464a      	mov	r2, r9
 8000db8:	4342      	muls	r2, r0
 8000dba:	040b      	lsls	r3, r1, #16
 8000dbc:	0c29      	lsrs	r1, r5, #16
 8000dbe:	0007      	movs	r7, r0
 8000dc0:	4319      	orrs	r1, r3
 8000dc2:	428a      	cmp	r2, r1
 8000dc4:	d907      	bls.n	8000dd6 <__aeabi_ddiv+0x3aa>
 8000dc6:	1989      	adds	r1, r1, r6
 8000dc8:	3f01      	subs	r7, #1
 8000dca:	428e      	cmp	r6, r1
 8000dcc:	d803      	bhi.n	8000dd6 <__aeabi_ddiv+0x3aa>
 8000dce:	428a      	cmp	r2, r1
 8000dd0:	d901      	bls.n	8000dd6 <__aeabi_ddiv+0x3aa>
 8000dd2:	1e87      	subs	r7, r0, #2
 8000dd4:	1989      	adds	r1, r1, r6
 8000dd6:	1a88      	subs	r0, r1, r2
 8000dd8:	9901      	ldr	r1, [sp, #4]
 8000dda:	f7ff fa1b 	bl	8000214 <__aeabi_uidivmod>
 8000dde:	0409      	lsls	r1, r1, #16
 8000de0:	464a      	mov	r2, r9
 8000de2:	4689      	mov	r9, r1
 8000de4:	0429      	lsls	r1, r5, #16
 8000de6:	464d      	mov	r5, r9
 8000de8:	4342      	muls	r2, r0
 8000dea:	0c09      	lsrs	r1, r1, #16
 8000dec:	0003      	movs	r3, r0
 8000dee:	4329      	orrs	r1, r5
 8000df0:	428a      	cmp	r2, r1
 8000df2:	d907      	bls.n	8000e04 <__aeabi_ddiv+0x3d8>
 8000df4:	1989      	adds	r1, r1, r6
 8000df6:	3b01      	subs	r3, #1
 8000df8:	428e      	cmp	r6, r1
 8000dfa:	d803      	bhi.n	8000e04 <__aeabi_ddiv+0x3d8>
 8000dfc:	428a      	cmp	r2, r1
 8000dfe:	d901      	bls.n	8000e04 <__aeabi_ddiv+0x3d8>
 8000e00:	1e83      	subs	r3, r0, #2
 8000e02:	1989      	adds	r1, r1, r6
 8000e04:	043f      	lsls	r7, r7, #16
 8000e06:	1a89      	subs	r1, r1, r2
 8000e08:	003a      	movs	r2, r7
 8000e0a:	9f03      	ldr	r7, [sp, #12]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	0038      	movs	r0, r7
 8000e10:	0413      	lsls	r3, r2, #16
 8000e12:	0c1b      	lsrs	r3, r3, #16
 8000e14:	4358      	muls	r0, r3
 8000e16:	4681      	mov	r9, r0
 8000e18:	9802      	ldr	r0, [sp, #8]
 8000e1a:	0c15      	lsrs	r5, r2, #16
 8000e1c:	436f      	muls	r7, r5
 8000e1e:	4343      	muls	r3, r0
 8000e20:	4345      	muls	r5, r0
 8000e22:	4648      	mov	r0, r9
 8000e24:	0c00      	lsrs	r0, r0, #16
 8000e26:	4684      	mov	ip, r0
 8000e28:	19db      	adds	r3, r3, r7
 8000e2a:	4463      	add	r3, ip
 8000e2c:	429f      	cmp	r7, r3
 8000e2e:	d903      	bls.n	8000e38 <__aeabi_ddiv+0x40c>
 8000e30:	2080      	movs	r0, #128	; 0x80
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	4684      	mov	ip, r0
 8000e36:	4465      	add	r5, ip
 8000e38:	4648      	mov	r0, r9
 8000e3a:	0c1f      	lsrs	r7, r3, #16
 8000e3c:	0400      	lsls	r0, r0, #16
 8000e3e:	041b      	lsls	r3, r3, #16
 8000e40:	0c00      	lsrs	r0, r0, #16
 8000e42:	197d      	adds	r5, r7, r5
 8000e44:	1818      	adds	r0, r3, r0
 8000e46:	42a9      	cmp	r1, r5
 8000e48:	d200      	bcs.n	8000e4c <__aeabi_ddiv+0x420>
 8000e4a:	e084      	b.n	8000f56 <__aeabi_ddiv+0x52a>
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x424>
 8000e4e:	e07f      	b.n	8000f50 <__aeabi_ddiv+0x524>
 8000e50:	2301      	movs	r3, #1
 8000e52:	431a      	orrs	r2, r3
 8000e54:	e657      	b.n	8000b06 <__aeabi_ddiv+0xda>
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	464a      	mov	r2, r9
 8000e5a:	031b      	lsls	r3, r3, #12
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	031b      	lsls	r3, r3, #12
 8000e60:	0b1b      	lsrs	r3, r3, #12
 8000e62:	46aa      	mov	sl, r5
 8000e64:	4a6f      	ldr	r2, [pc, #444]	; (8001024 <__aeabi_ddiv+0x5f8>)
 8000e66:	e66f      	b.n	8000b48 <__aeabi_ddiv+0x11c>
 8000e68:	42ba      	cmp	r2, r7
 8000e6a:	d900      	bls.n	8000e6e <__aeabi_ddiv+0x442>
 8000e6c:	e735      	b.n	8000cda <__aeabi_ddiv+0x2ae>
 8000e6e:	464b      	mov	r3, r9
 8000e70:	07dc      	lsls	r4, r3, #31
 8000e72:	0858      	lsrs	r0, r3, #1
 8000e74:	087b      	lsrs	r3, r7, #1
 8000e76:	431c      	orrs	r4, r3
 8000e78:	07ff      	lsls	r7, r7, #31
 8000e7a:	e734      	b.n	8000ce6 <__aeabi_ddiv+0x2ba>
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	42af      	cmp	r7, r5
 8000e80:	d289      	bcs.n	8000d96 <__aeabi_ddiv+0x36a>
 8000e82:	4447      	add	r7, r8
 8000e84:	4547      	cmp	r7, r8
 8000e86:	41a4      	sbcs	r4, r4
 8000e88:	465b      	mov	r3, fp
 8000e8a:	4264      	negs	r4, r4
 8000e8c:	19a4      	adds	r4, r4, r6
 8000e8e:	1864      	adds	r4, r4, r1
 8000e90:	3b01      	subs	r3, #1
 8000e92:	42a6      	cmp	r6, r4
 8000e94:	d21e      	bcs.n	8000ed4 <__aeabi_ddiv+0x4a8>
 8000e96:	42a0      	cmp	r0, r4
 8000e98:	d86d      	bhi.n	8000f76 <__aeabi_ddiv+0x54a>
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x472>
 8000e9c:	e0b6      	b.n	800100c <__aeabi_ddiv+0x5e0>
 8000e9e:	1a24      	subs	r4, r4, r0
 8000ea0:	469b      	mov	fp, r3
 8000ea2:	e778      	b.n	8000d96 <__aeabi_ddiv+0x36a>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	465a      	mov	r2, fp
 8000ea8:	3b28      	subs	r3, #40	; 0x28
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	2700      	movs	r7, #0
 8000eae:	4691      	mov	r9, r2
 8000eb0:	e688      	b.n	8000bc4 <__aeabi_ddiv+0x198>
 8000eb2:	4658      	mov	r0, fp
 8000eb4:	f000 f92c 	bl	8001110 <__clzsi2>
 8000eb8:	3020      	adds	r0, #32
 8000eba:	e672      	b.n	8000ba2 <__aeabi_ddiv+0x176>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	4652      	mov	r2, sl
 8000ec0:	3b28      	subs	r3, #40	; 0x28
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	4693      	mov	fp, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	e6b4      	b.n	8000c34 <__aeabi_ddiv+0x208>
 8000eca:	4650      	mov	r0, sl
 8000ecc:	f000 f920 	bl	8001110 <__clzsi2>
 8000ed0:	3020      	adds	r0, #32
 8000ed2:	e69a      	b.n	8000c0a <__aeabi_ddiv+0x1de>
 8000ed4:	42a6      	cmp	r6, r4
 8000ed6:	d1e2      	bne.n	8000e9e <__aeabi_ddiv+0x472>
 8000ed8:	45b8      	cmp	r8, r7
 8000eda:	d9dc      	bls.n	8000e96 <__aeabi_ddiv+0x46a>
 8000edc:	1a34      	subs	r4, r6, r0
 8000ede:	469b      	mov	fp, r3
 8000ee0:	e759      	b.n	8000d96 <__aeabi_ddiv+0x36a>
 8000ee2:	2b1f      	cmp	r3, #31
 8000ee4:	dc65      	bgt.n	8000fb2 <__aeabi_ddiv+0x586>
 8000ee6:	4c50      	ldr	r4, [pc, #320]	; (8001028 <__aeabi_ddiv+0x5fc>)
 8000ee8:	9900      	ldr	r1, [sp, #0]
 8000eea:	46a4      	mov	ip, r4
 8000eec:	465c      	mov	r4, fp
 8000eee:	4461      	add	r1, ip
 8000ef0:	0008      	movs	r0, r1
 8000ef2:	408c      	lsls	r4, r1
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	4082      	lsls	r2, r0
 8000ef8:	40d9      	lsrs	r1, r3
 8000efa:	1e50      	subs	r0, r2, #1
 8000efc:	4182      	sbcs	r2, r0
 8000efe:	430c      	orrs	r4, r1
 8000f00:	4314      	orrs	r4, r2
 8000f02:	465a      	mov	r2, fp
 8000f04:	40da      	lsrs	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	0762      	lsls	r2, r4, #29
 8000f0a:	d009      	beq.n	8000f20 <__aeabi_ddiv+0x4f4>
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	4022      	ands	r2, r4
 8000f10:	2a04      	cmp	r2, #4
 8000f12:	d005      	beq.n	8000f20 <__aeabi_ddiv+0x4f4>
 8000f14:	0022      	movs	r2, r4
 8000f16:	1d14      	adds	r4, r2, #4
 8000f18:	4294      	cmp	r4, r2
 8000f1a:	4189      	sbcs	r1, r1
 8000f1c:	4249      	negs	r1, r1
 8000f1e:	185b      	adds	r3, r3, r1
 8000f20:	021a      	lsls	r2, r3, #8
 8000f22:	d562      	bpl.n	8000fea <__aeabi_ddiv+0x5be>
 8000f24:	2201      	movs	r2, #1
 8000f26:	2300      	movs	r3, #0
 8000f28:	2700      	movs	r7, #0
 8000f2a:	e60d      	b.n	8000b48 <__aeabi_ddiv+0x11c>
 8000f2c:	428a      	cmp	r2, r1
 8000f2e:	d800      	bhi.n	8000f32 <__aeabi_ddiv+0x506>
 8000f30:	e70a      	b.n	8000d48 <__aeabi_ddiv+0x31c>
 8000f32:	1e83      	subs	r3, r0, #2
 8000f34:	1989      	adds	r1, r1, r6
 8000f36:	e707      	b.n	8000d48 <__aeabi_ddiv+0x31c>
 8000f38:	230f      	movs	r3, #15
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_ddiv+0x516>
 8000f40:	e5e6      	b.n	8000b10 <__aeabi_ddiv+0xe4>
 8000f42:	1d17      	adds	r7, r2, #4
 8000f44:	4297      	cmp	r7, r2
 8000f46:	4192      	sbcs	r2, r2
 8000f48:	4253      	negs	r3, r2
 8000f4a:	449b      	add	fp, r3
 8000f4c:	08fa      	lsrs	r2, r7, #3
 8000f4e:	e5e0      	b.n	8000b12 <__aeabi_ddiv+0xe6>
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_ddiv+0x52a>
 8000f54:	e5d7      	b.n	8000b06 <__aeabi_ddiv+0xda>
 8000f56:	1871      	adds	r1, r6, r1
 8000f58:	1e53      	subs	r3, r2, #1
 8000f5a:	42b1      	cmp	r1, r6
 8000f5c:	d327      	bcc.n	8000fae <__aeabi_ddiv+0x582>
 8000f5e:	42a9      	cmp	r1, r5
 8000f60:	d315      	bcc.n	8000f8e <__aeabi_ddiv+0x562>
 8000f62:	d058      	beq.n	8001016 <__aeabi_ddiv+0x5ea>
 8000f64:	001a      	movs	r2, r3
 8000f66:	e773      	b.n	8000e50 <__aeabi_ddiv+0x424>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	dc00      	bgt.n	8000f6e <__aeabi_ddiv+0x542>
 8000f6c:	e604      	b.n	8000b78 <__aeabi_ddiv+0x14c>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	2200      	movs	r2, #0
 8000f72:	449b      	add	fp, r3
 8000f74:	e5cd      	b.n	8000b12 <__aeabi_ddiv+0xe6>
 8000f76:	2302      	movs	r3, #2
 8000f78:	4447      	add	r7, r8
 8000f7a:	4547      	cmp	r7, r8
 8000f7c:	4189      	sbcs	r1, r1
 8000f7e:	425b      	negs	r3, r3
 8000f80:	469c      	mov	ip, r3
 8000f82:	4249      	negs	r1, r1
 8000f84:	1989      	adds	r1, r1, r6
 8000f86:	190c      	adds	r4, r1, r4
 8000f88:	44e3      	add	fp, ip
 8000f8a:	1a24      	subs	r4, r4, r0
 8000f8c:	e703      	b.n	8000d96 <__aeabi_ddiv+0x36a>
 8000f8e:	4643      	mov	r3, r8
 8000f90:	005f      	lsls	r7, r3, #1
 8000f92:	4547      	cmp	r7, r8
 8000f94:	419b      	sbcs	r3, r3
 8000f96:	46b8      	mov	r8, r7
 8000f98:	425b      	negs	r3, r3
 8000f9a:	199e      	adds	r6, r3, r6
 8000f9c:	3a02      	subs	r2, #2
 8000f9e:	1989      	adds	r1, r1, r6
 8000fa0:	42a9      	cmp	r1, r5
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_ddiv+0x57a>
 8000fa4:	e754      	b.n	8000e50 <__aeabi_ddiv+0x424>
 8000fa6:	4540      	cmp	r0, r8
 8000fa8:	d000      	beq.n	8000fac <__aeabi_ddiv+0x580>
 8000faa:	e751      	b.n	8000e50 <__aeabi_ddiv+0x424>
 8000fac:	e5ab      	b.n	8000b06 <__aeabi_ddiv+0xda>
 8000fae:	001a      	movs	r2, r3
 8000fb0:	e7f6      	b.n	8000fa0 <__aeabi_ddiv+0x574>
 8000fb2:	211f      	movs	r1, #31
 8000fb4:	465f      	mov	r7, fp
 8000fb6:	4249      	negs	r1, r1
 8000fb8:	1b0c      	subs	r4, r1, r4
 8000fba:	40e7      	lsrs	r7, r4
 8000fbc:	2b20      	cmp	r3, #32
 8000fbe:	d007      	beq.n	8000fd0 <__aeabi_ddiv+0x5a4>
 8000fc0:	491a      	ldr	r1, [pc, #104]	; (800102c <__aeabi_ddiv+0x600>)
 8000fc2:	9b00      	ldr	r3, [sp, #0]
 8000fc4:	468c      	mov	ip, r1
 8000fc6:	4463      	add	r3, ip
 8000fc8:	0018      	movs	r0, r3
 8000fca:	465b      	mov	r3, fp
 8000fcc:	4083      	lsls	r3, r0
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	1e50      	subs	r0, r2, #1
 8000fd2:	4182      	sbcs	r2, r0
 8000fd4:	433a      	orrs	r2, r7
 8000fd6:	2707      	movs	r7, #7
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4017      	ands	r7, r2
 8000fdc:	d009      	beq.n	8000ff2 <__aeabi_ddiv+0x5c6>
 8000fde:	210f      	movs	r1, #15
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4011      	ands	r1, r2
 8000fe4:	0014      	movs	r4, r2
 8000fe6:	2904      	cmp	r1, #4
 8000fe8:	d195      	bne.n	8000f16 <__aeabi_ddiv+0x4ea>
 8000fea:	0022      	movs	r2, r4
 8000fec:	075f      	lsls	r7, r3, #29
 8000fee:	025b      	lsls	r3, r3, #9
 8000ff0:	0b1b      	lsrs	r3, r3, #12
 8000ff2:	08d2      	lsrs	r2, r2, #3
 8000ff4:	4317      	orrs	r7, r2
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	e5a6      	b.n	8000b48 <__aeabi_ddiv+0x11c>
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	4659      	mov	r1, fp
 8000ffe:	031b      	lsls	r3, r3, #12
 8001000:	430b      	orrs	r3, r1
 8001002:	031b      	lsls	r3, r3, #12
 8001004:	0017      	movs	r7, r2
 8001006:	0b1b      	lsrs	r3, r3, #12
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <__aeabi_ddiv+0x5f8>)
 800100a:	e59d      	b.n	8000b48 <__aeabi_ddiv+0x11c>
 800100c:	42bd      	cmp	r5, r7
 800100e:	d8b2      	bhi.n	8000f76 <__aeabi_ddiv+0x54a>
 8001010:	469b      	mov	fp, r3
 8001012:	2400      	movs	r4, #0
 8001014:	e6bf      	b.n	8000d96 <__aeabi_ddiv+0x36a>
 8001016:	4580      	cmp	r8, r0
 8001018:	d3b9      	bcc.n	8000f8e <__aeabi_ddiv+0x562>
 800101a:	001a      	movs	r2, r3
 800101c:	e7c3      	b.n	8000fa6 <__aeabi_ddiv+0x57a>
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	000003ff 	.word	0x000003ff
 8001024:	000007ff 	.word	0x000007ff
 8001028:	0000041e 	.word	0x0000041e
 800102c:	0000043e 	.word	0x0000043e

08001030 <__aeabi_d2iz>:
 8001030:	b530      	push	{r4, r5, lr}
 8001032:	4d14      	ldr	r5, [pc, #80]	; (8001084 <__aeabi_d2iz+0x54>)
 8001034:	030a      	lsls	r2, r1, #12
 8001036:	004b      	lsls	r3, r1, #1
 8001038:	0b12      	lsrs	r2, r2, #12
 800103a:	0d5b      	lsrs	r3, r3, #21
 800103c:	0fc9      	lsrs	r1, r1, #31
 800103e:	2400      	movs	r4, #0
 8001040:	42ab      	cmp	r3, r5
 8001042:	dd11      	ble.n	8001068 <__aeabi_d2iz+0x38>
 8001044:	4c10      	ldr	r4, [pc, #64]	; (8001088 <__aeabi_d2iz+0x58>)
 8001046:	42a3      	cmp	r3, r4
 8001048:	dc10      	bgt.n	800106c <__aeabi_d2iz+0x3c>
 800104a:	2480      	movs	r4, #128	; 0x80
 800104c:	0364      	lsls	r4, r4, #13
 800104e:	4322      	orrs	r2, r4
 8001050:	4c0e      	ldr	r4, [pc, #56]	; (800108c <__aeabi_d2iz+0x5c>)
 8001052:	1ae4      	subs	r4, r4, r3
 8001054:	2c1f      	cmp	r4, #31
 8001056:	dd0c      	ble.n	8001072 <__aeabi_d2iz+0x42>
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <__aeabi_d2iz+0x60>)
 800105a:	1ac3      	subs	r3, r0, r3
 800105c:	40da      	lsrs	r2, r3
 800105e:	0013      	movs	r3, r2
 8001060:	425c      	negs	r4, r3
 8001062:	2900      	cmp	r1, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_d2iz+0x38>
 8001066:	001c      	movs	r4, r3
 8001068:	0020      	movs	r0, r4
 800106a:	bd30      	pop	{r4, r5, pc}
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <__aeabi_d2iz+0x64>)
 800106e:	18cc      	adds	r4, r1, r3
 8001070:	e7fa      	b.n	8001068 <__aeabi_d2iz+0x38>
 8001072:	4d09      	ldr	r5, [pc, #36]	; (8001098 <__aeabi_d2iz+0x68>)
 8001074:	40e0      	lsrs	r0, r4
 8001076:	46ac      	mov	ip, r5
 8001078:	4463      	add	r3, ip
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	4303      	orrs	r3, r0
 8001080:	e7ee      	b.n	8001060 <__aeabi_d2iz+0x30>
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	000003fe 	.word	0x000003fe
 8001088:	0000041d 	.word	0x0000041d
 800108c:	00000433 	.word	0x00000433
 8001090:	00000413 	.word	0x00000413
 8001094:	7fffffff 	.word	0x7fffffff
 8001098:	fffffbed 	.word	0xfffffbed

0800109c <__aeabi_i2d>:
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	2800      	cmp	r0, #0
 80010a0:	d02d      	beq.n	80010fe <__aeabi_i2d+0x62>
 80010a2:	17c3      	asrs	r3, r0, #31
 80010a4:	18c5      	adds	r5, r0, r3
 80010a6:	405d      	eors	r5, r3
 80010a8:	0fc4      	lsrs	r4, r0, #31
 80010aa:	0028      	movs	r0, r5
 80010ac:	f000 f830 	bl	8001110 <__clzsi2>
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <__aeabi_i2d+0x6c>)
 80010b2:	1a1b      	subs	r3, r3, r0
 80010b4:	055b      	lsls	r3, r3, #21
 80010b6:	0d5b      	lsrs	r3, r3, #21
 80010b8:	280a      	cmp	r0, #10
 80010ba:	dd15      	ble.n	80010e8 <__aeabi_i2d+0x4c>
 80010bc:	380b      	subs	r0, #11
 80010be:	4085      	lsls	r5, r0
 80010c0:	2200      	movs	r2, #0
 80010c2:	032d      	lsls	r5, r5, #12
 80010c4:	0b2d      	lsrs	r5, r5, #12
 80010c6:	2100      	movs	r1, #0
 80010c8:	0010      	movs	r0, r2
 80010ca:	032d      	lsls	r5, r5, #12
 80010cc:	0d0a      	lsrs	r2, r1, #20
 80010ce:	0b2d      	lsrs	r5, r5, #12
 80010d0:	0512      	lsls	r2, r2, #20
 80010d2:	432a      	orrs	r2, r5
 80010d4:	4d0d      	ldr	r5, [pc, #52]	; (800110c <__aeabi_i2d+0x70>)
 80010d6:	051b      	lsls	r3, r3, #20
 80010d8:	402a      	ands	r2, r5
 80010da:	4313      	orrs	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	07e4      	lsls	r4, r4, #31
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	4323      	orrs	r3, r4
 80010e4:	0019      	movs	r1, r3
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
 80010e8:	0002      	movs	r2, r0
 80010ea:	0029      	movs	r1, r5
 80010ec:	3215      	adds	r2, #21
 80010ee:	4091      	lsls	r1, r2
 80010f0:	000a      	movs	r2, r1
 80010f2:	210b      	movs	r1, #11
 80010f4:	1a08      	subs	r0, r1, r0
 80010f6:	40c5      	lsrs	r5, r0
 80010f8:	032d      	lsls	r5, r5, #12
 80010fa:	0b2d      	lsrs	r5, r5, #12
 80010fc:	e7e3      	b.n	80010c6 <__aeabi_i2d+0x2a>
 80010fe:	2400      	movs	r4, #0
 8001100:	2300      	movs	r3, #0
 8001102:	2500      	movs	r5, #0
 8001104:	2200      	movs	r2, #0
 8001106:	e7de      	b.n	80010c6 <__aeabi_i2d+0x2a>
 8001108:	0000041e 	.word	0x0000041e
 800110c:	800fffff 	.word	0x800fffff

08001110 <__clzsi2>:
 8001110:	211c      	movs	r1, #28
 8001112:	2301      	movs	r3, #1
 8001114:	041b      	lsls	r3, r3, #16
 8001116:	4298      	cmp	r0, r3
 8001118:	d301      	bcc.n	800111e <__clzsi2+0xe>
 800111a:	0c00      	lsrs	r0, r0, #16
 800111c:	3910      	subs	r1, #16
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	4298      	cmp	r0, r3
 8001122:	d301      	bcc.n	8001128 <__clzsi2+0x18>
 8001124:	0a00      	lsrs	r0, r0, #8
 8001126:	3908      	subs	r1, #8
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	4298      	cmp	r0, r3
 800112c:	d301      	bcc.n	8001132 <__clzsi2+0x22>
 800112e:	0900      	lsrs	r0, r0, #4
 8001130:	3904      	subs	r1, #4
 8001132:	a202      	add	r2, pc, #8	; (adr r2, 800113c <__clzsi2+0x2c>)
 8001134:	5c10      	ldrb	r0, [r2, r0]
 8001136:	1840      	adds	r0, r0, r1
 8001138:	4770      	bx	lr
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	02020304 	.word	0x02020304
 8001140:	01010101 	.word	0x01010101
	...

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001152:	f000 fa93 	bl	800167c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001156:	f000 f893 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115a:	f000 f941 	bl	80013e0 <MX_GPIO_Init>
  MX_I2C2_Init();
 800115e:	f000 f8cf 	bl	8001300 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001162:	f000 f90d 	bl	8001380 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* 1. Initialize MP6050	*/
  while(init_mpu6050(&hi2c2, &mpu6050)) {}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	4a42      	ldr	r2, [pc, #264]	; (8001274 <main+0x128>)
 800116a:	4b43      	ldr	r3, [pc, #268]	; (8001278 <main+0x12c>)
 800116c:	0011      	movs	r1, r2
 800116e:	0018      	movs	r0, r3
 8001170:	f002 fb80 	bl	8003874 <init_mpu6050>
 8001174:	1e03      	subs	r3, r0, #0
 8001176:	d1f7      	bne.n	8001168 <main+0x1c>

  int16_t temp = 0;
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	801a      	strh	r2, [r3, #0]
  int16_t gyro_x = 0, gyro_y = 0, gyro_z = 0;
 800117e:	230e      	movs	r3, #14
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	2200      	movs	r2, #0
 8001184:	801a      	strh	r2, [r3, #0]
 8001186:	230c      	movs	r3, #12
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2200      	movs	r2, #0
 800118c:	801a      	strh	r2, [r3, #0]
 800118e:	230a      	movs	r3, #10
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	2200      	movs	r2, #0
 8001194:	801a      	strh	r2, [r3, #0]
  int16_t accel_x = 0, accel_y = 0, accel_z = 0;
 8001196:	1cbb      	adds	r3, r7, #2
 8001198:	2200      	movs	r2, #0
 800119a:	801a      	strh	r2, [r3, #0]
 800119c:	2308      	movs	r3, #8
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	2200      	movs	r2, #0
 80011a2:	801a      	strh	r2, [r3, #0]
 80011a4:	1dbb      	adds	r3, r7, #6
 80011a6:	2200      	movs	r2, #0
 80011a8:	801a      	strh	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // 2. Read Temperature

	  mpu_readTemp(&hi2c2, &mpu6050);
 80011aa:	4a32      	ldr	r2, [pc, #200]	; (8001274 <main+0x128>)
 80011ac:	4b32      	ldr	r3, [pc, #200]	; (8001278 <main+0x12c>)
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f002 fbf1 	bl	8003998 <mpu_readTemp>
	  	  HAL_Delay(10);
 80011b6:	200a      	movs	r0, #10
 80011b8:	f000 fac4 	bl	8001744 <HAL_Delay>
	  temp = getTemp(&mpu6050);
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <main+0x128>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f002 fc3e 	bl	8003a40 <getTemp>
 80011c4:	0003      	movs	r3, r0
 80011c6:	001a      	movs	r2, r3
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	801a      	strh	r2, [r3, #0]

	  // 3. Read Gyroscope register

	  mpu_readGyroscope(&hi2c2, &mpu6050);
 80011cc:	4a29      	ldr	r2, [pc, #164]	; (8001274 <main+0x128>)
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <main+0x12c>)
 80011d0:	0011      	movs	r1, r2
 80011d2:	0018      	movs	r0, r3
 80011d4:	f002 fc40 	bl	8003a58 <mpu_readGyroscope>
	  gyro_x = read_Gyro_X(&mpu6050);
 80011d8:	230e      	movs	r3, #14
 80011da:	18fc      	adds	r4, r7, r3
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <main+0x128>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f002 fcc6 	bl	8003b70 <read_Gyro_X>
 80011e4:	0003      	movs	r3, r0
 80011e6:	8023      	strh	r3, [r4, #0]
	  gyro_y = read_Gyro_Y(&mpu6050);
 80011e8:	230c      	movs	r3, #12
 80011ea:	18fc      	adds	r4, r7, r3
 80011ec:	4b21      	ldr	r3, [pc, #132]	; (8001274 <main+0x128>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f002 fcc9 	bl	8003b86 <read_Gyro_Y>
 80011f4:	0003      	movs	r3, r0
 80011f6:	8023      	strh	r3, [r4, #0]
	  gyro_z = read_Gyro_Z(&mpu6050);
 80011f8:	230a      	movs	r3, #10
 80011fa:	18fc      	adds	r4, r7, r3
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <main+0x128>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f002 fccc 	bl	8003b9c <read_Gyro_Z>
 8001204:	0003      	movs	r3, r0
 8001206:	8023      	strh	r3, [r4, #0]
	  	  HAL_Delay(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f000 fa9b 	bl	8001744 <HAL_Delay>

	  // 4. Read accelerometer register

	  mpu_readAccel(&hi2c2, &mpu6050);
 800120e:	4a19      	ldr	r2, [pc, #100]	; (8001274 <main+0x128>)
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <main+0x12c>)
 8001212:	0011      	movs	r1, r2
 8001214:	0018      	movs	r0, r3
 8001216:	f002 fccd 	bl	8003bb4 <mpu_readAccel>
	  accel_x = read_accel_X(&mpu6050);
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <main+0x128>)
 800121c:	0018      	movs	r0, r3
 800121e:	f002 fd55 	bl	8003ccc <read_accel_X>
 8001222:	0003      	movs	r3, r0
 8001224:	001a      	movs	r2, r3
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	801a      	strh	r2, [r3, #0]
	  accel_y = read_accel_Y(&mpu6050);
 800122a:	2308      	movs	r3, #8
 800122c:	18fc      	adds	r4, r7, r3
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <main+0x128>)
 8001230:	0018      	movs	r0, r3
 8001232:	f002 fd56 	bl	8003ce2 <read_accel_Y>
 8001236:	0003      	movs	r3, r0
 8001238:	8023      	strh	r3, [r4, #0]
	  accel_z = read_accel_Z(&mpu6050);
 800123a:	1dbc      	adds	r4, r7, #6
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <main+0x128>)
 800123e:	0018      	movs	r0, r3
 8001240:	f002 fd5a 	bl	8003cf8 <read_accel_Z>
 8001244:	0003      	movs	r3, r0
 8001246:	8023      	strh	r3, [r4, #0]
	  	  HAL_Delay(10);
 8001248:	200a      	movs	r0, #10
 800124a:	f000 fa7b 	bl	8001744 <HAL_Delay>

	  // 5. Send all data via uart to display on Serial monitor

	 HAL_UART_Transmit(&huart2, (uint8_t *)&temp, sizeof(temp), 100);
 800124e:	1d39      	adds	r1, r7, #4
 8001250:	480a      	ldr	r0, [pc, #40]	; (800127c <main+0x130>)
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	2202      	movs	r2, #2
 8001256:	f001 ff4f 	bl	80030f8 <HAL_UART_Transmit>
	  	  HAL_Delay(100);
 800125a:	2064      	movs	r0, #100	; 0x64
 800125c:	f000 fa72 	bl	8001744 <HAL_Delay>
//	 HAL_UART_Transmit(&huart2, (uint8_t *)&gyro_y, sizeof(gyro_y), 100);
//	 HAL_Delay(100);
//	 HAL_UART_Transmit(&huart2, (uint8_t *)&gyro_z, sizeof(gyro_z), 100);
//		  HAL_Delay(100);

	 HAL_UART_Transmit(&huart2, &accel_x, sizeof(accel_x), 100);
 8001260:	1cb9      	adds	r1, r7, #2
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <main+0x130>)
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	2202      	movs	r2, #2
 8001268:	f001 ff46 	bl	80030f8 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800126c:	2064      	movs	r0, #100	; 0x64
 800126e:	f000 fa69 	bl	8001744 <HAL_Delay>
	  mpu_readTemp(&hi2c2, &mpu6050);
 8001272:	e79a      	b.n	80011aa <main+0x5e>
 8001274:	20000028 	.word	0x20000028
 8001278:	20000038 	.word	0x20000038
 800127c:	20000084 	.word	0x20000084

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b091      	sub	sp, #68	; 0x44
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	2410      	movs	r4, #16
 8001288:	193b      	adds	r3, r7, r4
 800128a:	0018      	movs	r0, r3
 800128c:	2330      	movs	r3, #48	; 0x30
 800128e:	001a      	movs	r2, r3
 8001290:	2100      	movs	r1, #0
 8001292:	f002 fd61 	bl	8003d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001296:	003b      	movs	r3, r7
 8001298:	0018      	movs	r0, r3
 800129a:	2310      	movs	r3, #16
 800129c:	001a      	movs	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	f002 fd5a 	bl	8003d58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a4:	0021      	movs	r1, r4
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2202      	movs	r2, #2
 80012aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2201      	movs	r2, #1
 80012b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2210      	movs	r2, #16
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	0018      	movs	r0, r3
 80012c2:	f001 fa53 	bl	800276c <HAL_RCC_OscConfig>
 80012c6:	1e03      	subs	r3, r0, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80012ca:	f000 f8cb 	bl	8001464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	003b      	movs	r3, r7
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012d4:	003b      	movs	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	003b      	movs	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e0:	003b      	movs	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012e6:	003b      	movs	r3, r7
 80012e8:	2100      	movs	r1, #0
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 fd5c 	bl	8002da8 <HAL_RCC_ClockConfig>
 80012f0:	1e03      	subs	r3, r0, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80012f4:	f000 f8b6 	bl	8001464 <Error_Handler>
  }
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b011      	add	sp, #68	; 0x44
 80012fe:	bd90      	pop	{r4, r7, pc}

08001300 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_I2C2_Init+0x74>)
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <MX_I2C2_Init+0x78>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_I2C2_Init+0x74>)
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <MX_I2C2_Init+0x7c>)
 800130e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_I2C2_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_I2C2_Init+0x74>)
 8001318:	2201      	movs	r2, #1
 800131a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_I2C2_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_I2C2_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_I2C2_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_I2C2_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_I2C2_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_I2C2_Init+0x74>)
 800133c:	0018      	movs	r0, r3
 800133e:	f000 fc47 	bl	8001bd0 <HAL_I2C_Init>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d001      	beq.n	800134a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001346:	f000 f88d 	bl	8001464 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_I2C2_Init+0x74>)
 800134c:	2100      	movs	r1, #0
 800134e:	0018      	movs	r0, r3
 8001350:	f001 f974 	bl	800263c <HAL_I2CEx_ConfigAnalogFilter>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d001      	beq.n	800135c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001358:	f000 f884 	bl	8001464 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <MX_I2C2_Init+0x74>)
 800135e:	2100      	movs	r1, #0
 8001360:	0018      	movs	r0, r3
 8001362:	f001 f9b7 	bl	80026d4 <HAL_I2CEx_ConfigDigitalFilter>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800136a:	f000 f87b 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000038 	.word	0x20000038
 8001378:	40005800 	.word	0x40005800
 800137c:	2000090e 	.word	0x2000090e

08001380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 8001386:	4a15      	ldr	r2, [pc, #84]	; (80013dc <MX_USART2_UART_Init+0x5c>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 800138c:	2296      	movs	r2, #150	; 0x96
 800138e:	0212      	lsls	r2, r2, #8
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013c4:	0018      	movs	r0, r3
 80013c6:	f001 fe43 	bl	8003050 <HAL_UART_Init>
 80013ca:	1e03      	subs	r3, r0, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ce:	f000 f849 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000084 	.word	0x20000084
 80013dc:	40004400 	.word	0x40004400

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <MX_GPIO_Init+0x80>)
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_GPIO_Init+0x80>)
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	0309      	lsls	r1, r1, #12
 80013f0:	430a      	orrs	r2, r1
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <MX_GPIO_Init+0x80>)
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	031b      	lsls	r3, r3, #12
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <MX_GPIO_Init+0x80>)
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_GPIO_Init+0x80>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	03c9      	lsls	r1, r1, #15
 800140c:	430a      	orrs	r2, r1
 800140e:	615a      	str	r2, [r3, #20]
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_GPIO_Init+0x80>)
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	03db      	lsls	r3, r3, #15
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_GPIO_Init+0x80>)
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_GPIO_Init+0x80>)
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	0289      	lsls	r1, r1, #10
 8001428:	430a      	orrs	r2, r1
 800142a:	615a      	str	r2, [r3, #20]
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_GPIO_Init+0x80>)
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	029b      	lsls	r3, r3, #10
 8001434:	4013      	ands	r3, r2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_GPIO_Init+0x80>)
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_GPIO_Init+0x80>)
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	02c9      	lsls	r1, r1, #11
 8001444:	430a      	orrs	r2, r1
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <MX_GPIO_Init+0x80>)
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	02db      	lsls	r3, r3, #11
 8001450:	4013      	ands	r3, r2
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b004      	add	sp, #16
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	40021000 	.word	0x40021000

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_MspInit+0x44>)
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_MspInit+0x44>)
 800147c:	2101      	movs	r1, #1
 800147e:	430a      	orrs	r2, r1
 8001480:	619a      	str	r2, [r3, #24]
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_MspInit+0x44>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2201      	movs	r2, #1
 8001488:	4013      	ands	r3, r2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_MspInit+0x44>)
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_MspInit+0x44>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0549      	lsls	r1, r1, #21
 8001498:	430a      	orrs	r2, r1
 800149a:	61da      	str	r2, [r3, #28]
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_MspInit+0x44>)
 800149e:	69da      	ldr	r2, [r3, #28]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	055b      	lsls	r3, r3, #21
 80014a4:	4013      	ands	r3, r2
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	2314      	movs	r3, #20
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	0018      	movs	r0, r3
 80014c6:	2314      	movs	r3, #20
 80014c8:	001a      	movs	r2, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	f002 fc44 	bl	8003d58 <memset>
  if(hi2c->Instance==I2C2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_I2C_MspInit+0x90>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d132      	bne.n	8001540 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_I2C_MspInit+0x94>)
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_I2C_MspInit+0x94>)
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	02c9      	lsls	r1, r1, #11
 80014e4:	430a      	orrs	r2, r1
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_I2C_MspInit+0x94>)
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	02db      	lsls	r3, r3, #11
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014f6:	2114      	movs	r1, #20
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	22c0      	movs	r2, #192	; 0xc0
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	187b      	adds	r3, r7, r1
 8001502:	2212      	movs	r2, #18
 8001504:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001506:	187b      	adds	r3, r7, r1
 8001508:	2201      	movs	r2, #1
 800150a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	2203      	movs	r2, #3
 8001510:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2201      	movs	r2, #1
 8001516:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	187b      	adds	r3, r7, r1
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_I2C_MspInit+0x98>)
 800151c:	0019      	movs	r1, r3
 800151e:	0010      	movs	r0, r2
 8001520:	f000 f9e6 	bl	80018f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_I2C_MspInit+0x94>)
 8001526:	69da      	ldr	r2, [r3, #28]
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_I2C_MspInit+0x94>)
 800152a:	2180      	movs	r1, #128	; 0x80
 800152c:	03c9      	lsls	r1, r1, #15
 800152e:	430a      	orrs	r2, r1
 8001530:	61da      	str	r2, [r3, #28]
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_I2C_MspInit+0x94>)
 8001534:	69da      	ldr	r2, [r3, #28]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	03db      	lsls	r3, r3, #15
 800153a:	4013      	ands	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b00a      	add	sp, #40	; 0x28
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40005800 	.word	0x40005800
 800154c:	40021000 	.word	0x40021000
 8001550:	48000400 	.word	0x48000400

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	2314      	movs	r3, #20
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	0018      	movs	r0, r3
 8001562:	2314      	movs	r3, #20
 8001564:	001a      	movs	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	f002 fbf6 	bl	8003d58 <memset>
  if(huart->Instance==USART2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <HAL_UART_MspInit+0x90>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d132      	bne.n	80015dc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <HAL_UART_MspInit+0x94>)
 8001578:	69da      	ldr	r2, [r3, #28]
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_UART_MspInit+0x94>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0289      	lsls	r1, r1, #10
 8001580:	430a      	orrs	r2, r1
 8001582:	61da      	str	r2, [r3, #28]
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_UART_MspInit+0x94>)
 8001586:	69da      	ldr	r2, [r3, #28]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	029b      	lsls	r3, r3, #10
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_UART_MspInit+0x94>)
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_UART_MspInit+0x94>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0289      	lsls	r1, r1, #10
 800159c:	430a      	orrs	r2, r1
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_UART_MspInit+0x94>)
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	029b      	lsls	r3, r3, #10
 80015a8:	4013      	ands	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ae:	2114      	movs	r1, #20
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	2202      	movs	r2, #2
 80015ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2203      	movs	r2, #3
 80015c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2201      	movs	r2, #1
 80015cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	187a      	adds	r2, r7, r1
 80015d0:	2390      	movs	r3, #144	; 0x90
 80015d2:	05db      	lsls	r3, r3, #23
 80015d4:	0011      	movs	r1, r2
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 f98a 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b00a      	add	sp, #40	; 0x28
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40004400 	.word	0x40004400
 80015e8:	40021000 	.word	0x40021000

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f87a 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800162a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <LoopForever+0x6>)
  ldr r1, =_edata
 800162e:	490e      	ldr	r1, [pc, #56]	; (8001668 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <LoopForever+0xe>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001644:	4c0b      	ldr	r4, [pc, #44]	; (8001674 <LoopForever+0x16>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001652:	f7ff ffe4 	bl	800161e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001656:	f002 fb5b 	bl	8003d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800165a:	f7ff fd77 	bl	800114c <main>

0800165e <LoopForever>:

LoopForever:
    b LoopForever
 800165e:	e7fe      	b.n	800165e <LoopForever>
  ldr   r0, =_estack
 8001660:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001668:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800166c:	08003e00 	.word	0x08003e00
  ldr r2, =_sbss
 8001670:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001674:	20000108 	.word	0x20000108

08001678 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC1_IRQHandler>
	...

0800167c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <HAL_Init+0x24>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_Init+0x24>)
 8001686:	2110      	movs	r1, #16
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800168c:	2000      	movs	r0, #0
 800168e:	f000 f809 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001692:	f7ff feed 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	40022000 	.word	0x40022000

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_InitTick+0x5c>)
 80016ae:	681c      	ldr	r4, [r3, #0]
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_InitTick+0x60>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	0019      	movs	r1, r3
 80016b6:	23fa      	movs	r3, #250	; 0xfa
 80016b8:	0098      	lsls	r0, r3, #2
 80016ba:	f7fe fd25 	bl	8000108 <__udivsi3>
 80016be:	0003      	movs	r3, r0
 80016c0:	0019      	movs	r1, r3
 80016c2:	0020      	movs	r0, r4
 80016c4:	f7fe fd20 	bl	8000108 <__udivsi3>
 80016c8:	0003      	movs	r3, r0
 80016ca:	0018      	movs	r0, r3
 80016cc:	f000 f903 	bl	80018d6 <HAL_SYSTICK_Config>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e00f      	b.n	80016f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d80b      	bhi.n	80016f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2301      	movs	r3, #1
 80016e2:	425b      	negs	r3, r3
 80016e4:	2200      	movs	r2, #0
 80016e6:	0018      	movs	r0, r3
 80016e8:	f000 f8e0 	bl	80018ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_InitTick+0x64>)
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b003      	add	sp, #12
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	20000000 	.word	0x20000000
 8001704:	20000008 	.word	0x20000008
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_IncTick+0x1c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	001a      	movs	r2, r3
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_IncTick+0x20>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	18d2      	adds	r2, r2, r3
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_IncTick+0x20>)
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	46c0      	nop			; (mov r8, r8)
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	20000008 	.word	0x20000008
 800172c:	20000104 	.word	0x20000104

08001730 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <HAL_GetTick+0x10>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	20000104 	.word	0x20000104

08001744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff fff0 	bl	8001730 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3301      	adds	r3, #1
 800175c:	d005      	beq.n	800176a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_Delay+0x40>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	001a      	movs	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	189b      	adds	r3, r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	f7ff ffe0 	bl	8001730 <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8f7      	bhi.n	800176c <HAL_Delay+0x28>
  {
  }
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b004      	add	sp, #16
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000008 	.word	0x20000008

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	0002      	movs	r2, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001796:	1dfb      	adds	r3, r7, #7
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b7f      	cmp	r3, #127	; 0x7f
 800179c:	d828      	bhi.n	80017f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800179e:	4a2f      	ldr	r2, [pc, #188]	; (800185c <__NVIC_SetPriority+0xd4>)
 80017a0:	1dfb      	adds	r3, r7, #7
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	33c0      	adds	r3, #192	; 0xc0
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	589b      	ldr	r3, [r3, r2]
 80017ae:	1dfa      	adds	r2, r7, #7
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	0011      	movs	r1, r2
 80017b4:	2203      	movs	r2, #3
 80017b6:	400a      	ands	r2, r1
 80017b8:	00d2      	lsls	r2, r2, #3
 80017ba:	21ff      	movs	r1, #255	; 0xff
 80017bc:	4091      	lsls	r1, r2
 80017be:	000a      	movs	r2, r1
 80017c0:	43d2      	mvns	r2, r2
 80017c2:	401a      	ands	r2, r3
 80017c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	019b      	lsls	r3, r3, #6
 80017ca:	22ff      	movs	r2, #255	; 0xff
 80017cc:	401a      	ands	r2, r3
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	0018      	movs	r0, r3
 80017d4:	2303      	movs	r3, #3
 80017d6:	4003      	ands	r3, r0
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017dc:	481f      	ldr	r0, [pc, #124]	; (800185c <__NVIC_SetPriority+0xd4>)
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	430a      	orrs	r2, r1
 80017e8:	33c0      	adds	r3, #192	; 0xc0
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017ee:	e031      	b.n	8001854 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f0:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <__NVIC_SetPriority+0xd8>)
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	0019      	movs	r1, r3
 80017f8:	230f      	movs	r3, #15
 80017fa:	400b      	ands	r3, r1
 80017fc:	3b08      	subs	r3, #8
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3306      	adds	r3, #6
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	18d3      	adds	r3, r2, r3
 8001806:	3304      	adds	r3, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	1dfa      	adds	r2, r7, #7
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	0011      	movs	r1, r2
 8001810:	2203      	movs	r2, #3
 8001812:	400a      	ands	r2, r1
 8001814:	00d2      	lsls	r2, r2, #3
 8001816:	21ff      	movs	r1, #255	; 0xff
 8001818:	4091      	lsls	r1, r2
 800181a:	000a      	movs	r2, r1
 800181c:	43d2      	mvns	r2, r2
 800181e:	401a      	ands	r2, r3
 8001820:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	019b      	lsls	r3, r3, #6
 8001826:	22ff      	movs	r2, #255	; 0xff
 8001828:	401a      	ands	r2, r3
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	0018      	movs	r0, r3
 8001830:	2303      	movs	r3, #3
 8001832:	4003      	ands	r3, r0
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <__NVIC_SetPriority+0xd8>)
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	001c      	movs	r4, r3
 8001840:	230f      	movs	r3, #15
 8001842:	4023      	ands	r3, r4
 8001844:	3b08      	subs	r3, #8
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	430a      	orrs	r2, r1
 800184a:	3306      	adds	r3, #6
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	18c3      	adds	r3, r0, r3
 8001850:	3304      	adds	r3, #4
 8001852:	601a      	str	r2, [r3, #0]
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b003      	add	sp, #12
 800185a:	bd90      	pop	{r4, r7, pc}
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <SysTick_Config+0x40>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e010      	b.n	800189c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <SysTick_Config+0x44>)
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	3a01      	subs	r2, #1
 8001880:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	2301      	movs	r3, #1
 8001884:	425b      	negs	r3, r3
 8001886:	2103      	movs	r1, #3
 8001888:	0018      	movs	r0, r3
 800188a:	f7ff ff7d 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <SysTick_Config+0x44>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x44>)
 8001896:	2207      	movs	r2, #7
 8001898:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189a:	2300      	movs	r3, #0
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	00ffffff 	.word	0x00ffffff
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	210f      	movs	r1, #15
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	1c02      	adds	r2, r0, #0
 80018bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	0011      	movs	r1, r2
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff ff5d 	bl	8001788 <__NVIC_SetPriority>
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b004      	add	sp, #16
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7ff ffbf 	bl	8001864 <SysTick_Config>
 80018e6:	0003      	movs	r3, r0
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fe:	e14f      	b.n	8001ba0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2101      	movs	r1, #1
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4091      	lsls	r1, r2
 800190a:	000a      	movs	r2, r1
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d100      	bne.n	8001918 <HAL_GPIO_Init+0x28>
 8001916:	e140      	b.n	8001b9a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d00b      	beq.n	8001938 <HAL_GPIO_Init+0x48>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d007      	beq.n	8001938 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192c:	2b11      	cmp	r3, #17
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b12      	cmp	r3, #18
 8001936:	d130      	bne.n	800199a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	409a      	lsls	r2, r3
 8001946:	0013      	movs	r3, r2
 8001948:	43da      	mvns	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	409a      	lsls	r2, r3
 800195a:	0013      	movs	r3, r2
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196e:	2201      	movs	r2, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	43da      	mvns	r2, r3
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	2201      	movs	r2, #1
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
 800198c:	0013      	movs	r3, r2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	43da      	mvns	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0xea>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d123      	bne.n	8001a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	58d3      	ldr	r3, [r2, r3]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2207      	movs	r2, #7
 80019ec:	4013      	ands	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	43da      	mvns	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2107      	movs	r1, #7
 8001a06:	400b      	ands	r3, r1
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	401a      	ands	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	055b      	lsls	r3, r3, #21
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d100      	bne.n	8001a64 <HAL_GPIO_Init+0x174>
 8001a62:	e09a      	b.n	8001b9a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a64:	4b54      	ldr	r3, [pc, #336]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	619a      	str	r2, [r3, #24]
 8001a70:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7c:	4a4f      	ldr	r2, [pc, #316]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	589b      	ldr	r3, [r3, r2]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4013      	ands	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	409a      	lsls	r2, r3
 8001a96:	0013      	movs	r3, r2
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	2390      	movs	r3, #144	; 0x90
 8001aa4:	05db      	lsls	r3, r3, #23
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a44      	ldr	r2, [pc, #272]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x1de>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a43      	ldr	r2, [pc, #268]	; (8001bc4 <HAL_GPIO_Init+0x2d4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x1da>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <HAL_GPIO_Init+0x2d8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x1d6>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x1e4>
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	e004      	b.n	8001ad4 <HAL_GPIO_Init+0x1e4>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_Init+0x1e4>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x1e4>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	2103      	movs	r1, #3
 8001ad8:	400a      	ands	r2, r1
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4093      	lsls	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae4:	4935      	ldr	r1, [pc, #212]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43da      	mvns	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	025b      	lsls	r3, r3, #9
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43da      	mvns	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	035b      	lsls	r3, r3, #13
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	039b      	lsls	r3, r3, #14
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b94:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	40da      	lsrs	r2, r3
 8001ba8:	1e13      	subs	r3, r2, #0
 8001baa:	d000      	beq.n	8001bae <HAL_GPIO_Init+0x2be>
 8001bac:	e6a8      	b.n	8001900 <HAL_GPIO_Init+0x10>
  } 
}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b006      	add	sp, #24
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	48000c00 	.word	0x48000c00
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e082      	b.n	8001ce8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2241      	movs	r2, #65	; 0x41
 8001be6:	5c9b      	ldrb	r3, [r3, r2]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d107      	bne.n	8001bfe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2240      	movs	r2, #64	; 0x40
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff fc5d 	bl	80014b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2241      	movs	r2, #65	; 0x41
 8001c02:	2124      	movs	r1, #36	; 0x24
 8001c04:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	438a      	bics	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4934      	ldr	r1, [pc, #208]	; (8001cf0 <HAL_I2C_Init+0x120>)
 8001c20:	400a      	ands	r2, r1
 8001c22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4931      	ldr	r1, [pc, #196]	; (8001cf4 <HAL_I2C_Init+0x124>)
 8001c30:	400a      	ands	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d108      	bne.n	8001c4e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0209      	lsls	r1, r1, #8
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	e007      	b.n	8001c5e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2184      	movs	r1, #132	; 0x84
 8001c58:	0209      	lsls	r1, r1, #8
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d104      	bne.n	8001c70 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	491f      	ldr	r1, [pc, #124]	; (8001cf8 <HAL_I2C_Init+0x128>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <HAL_I2C_Init+0x124>)
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	021a      	lsls	r2, r3, #8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69d9      	ldr	r1, [r3, #28]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2241      	movs	r2, #65	; 0x41
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2242      	movs	r2, #66	; 0x42
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b002      	add	sp, #8
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	f0ffffff 	.word	0xf0ffffff
 8001cf4:	ffff7fff 	.word	0xffff7fff
 8001cf8:	02008000 	.word	0x02008000

08001cfc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	000c      	movs	r4, r1
 8001d06:	0010      	movs	r0, r2
 8001d08:	0019      	movs	r1, r3
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	1c22      	adds	r2, r4, #0
 8001d10:	801a      	strh	r2, [r3, #0]
 8001d12:	2308      	movs	r3, #8
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	1c02      	adds	r2, r0, #0
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	1dbb      	adds	r3, r7, #6
 8001d1c:	1c0a      	adds	r2, r1, #0
 8001d1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2241      	movs	r2, #65	; 0x41
 8001d24:	5c9b      	ldrb	r3, [r3, r2]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d000      	beq.n	8001d2e <HAL_I2C_Mem_Write+0x32>
 8001d2c:	e10c      	b.n	8001f48 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <HAL_I2C_Mem_Write+0x42>
 8001d34:	232c      	movs	r3, #44	; 0x2c
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2280      	movs	r2, #128	; 0x80
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0ff      	b.n	8001f4a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2240      	movs	r2, #64	; 0x40
 8001d4e:	5c9b      	ldrb	r3, [r3, r2]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_I2C_Mem_Write+0x5c>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e0f8      	b.n	8001f4a <HAL_I2C_Mem_Write+0x24e>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2240      	movs	r2, #64	; 0x40
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d60:	f7ff fce6 	bl	8001730 <HAL_GetTick>
 8001d64:	0003      	movs	r3, r0
 8001d66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	0219      	lsls	r1, r3, #8
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2319      	movs	r3, #25
 8001d74:	2201      	movs	r2, #1
 8001d76:	f000 fb0b 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	1e03      	subs	r3, r0, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0e3      	b.n	8001f4a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2241      	movs	r2, #65	; 0x41
 8001d86:	2121      	movs	r1, #33	; 0x21
 8001d88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2242      	movs	r2, #66	; 0x42
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	222c      	movs	r2, #44	; 0x2c
 8001da2:	18ba      	adds	r2, r7, r2
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dae:	1dbb      	adds	r3, r7, #6
 8001db0:	881c      	ldrh	r4, [r3, #0]
 8001db2:	2308      	movs	r3, #8
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	881a      	ldrh	r2, [r3, #0]
 8001db8:	230a      	movs	r3, #10
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	8819      	ldrh	r1, [r3, #0]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	0023      	movs	r3, r4
 8001dca:	f000 f9f9 	bl	80021c0 <I2C_RequestMemoryWrite>
 8001dce:	1e03      	subs	r3, r0, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2240      	movs	r2, #64	; 0x40
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0b5      	b.n	8001f4a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2bff      	cmp	r3, #255	; 0xff
 8001de6:	d911      	bls.n	8001e0c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	22ff      	movs	r2, #255	; 0xff
 8001dec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	045c      	lsls	r4, r3, #17
 8001df8:	230a      	movs	r3, #10
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	8819      	ldrh	r1, [r3, #0]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	2300      	movs	r3, #0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	0023      	movs	r3, r4
 8001e06:	f000 fbe3 	bl	80025d0 <I2C_TransferConfig>
 8001e0a:	e012      	b.n	8001e32 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	049c      	lsls	r4, r3, #18
 8001e20:	230a      	movs	r3, #10
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	8819      	ldrh	r1, [r3, #0]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	0023      	movs	r3, r4
 8001e2e:	f000 fbcf 	bl	80025d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 fae8 	bl	800240e <I2C_WaitOnTXISFlagUntilTimeout>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e081      	b.n	8001f4a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d03a      	beq.n	8001ef6 <HAL_I2C_Mem_Write+0x1fa>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d136      	bne.n	8001ef6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	0013      	movs	r3, r2
 8001e92:	2200      	movs	r2, #0
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	f000 fa7b 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e053      	b.n	8001f4a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2bff      	cmp	r3, #255	; 0xff
 8001eaa:	d911      	bls.n	8001ed0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	22ff      	movs	r2, #255	; 0xff
 8001eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	045c      	lsls	r4, r3, #17
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	8819      	ldrh	r1, [r3, #0]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	0023      	movs	r3, r4
 8001eca:	f000 fb81 	bl	80025d0 <I2C_TransferConfig>
 8001ece:	e012      	b.n	8001ef6 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	049c      	lsls	r4, r3, #18
 8001ee4:	230a      	movs	r3, #10
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	8819      	ldrh	r1, [r3, #0]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	2300      	movs	r3, #0
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	0023      	movs	r3, r4
 8001ef2:	f000 fb6d 	bl	80025d0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d198      	bne.n	8001e32 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fac0 	bl	800248c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e01a      	b.n	8001f4a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	490b      	ldr	r1, [pc, #44]	; (8001f54 <HAL_I2C_Mem_Write+0x258>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2241      	movs	r2, #65	; 0x41
 8001f30:	2120      	movs	r1, #32
 8001f32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2242      	movs	r2, #66	; 0x42
 8001f38:	2100      	movs	r1, #0
 8001f3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2240      	movs	r2, #64	; 0x40
 8001f40:	2100      	movs	r1, #0
 8001f42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
  }
}
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b007      	add	sp, #28
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	fe00e800 	.word	0xfe00e800

08001f58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	000c      	movs	r4, r1
 8001f62:	0010      	movs	r0, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	230a      	movs	r3, #10
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	1c22      	adds	r2, r4, #0
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	2308      	movs	r3, #8
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	1c02      	adds	r2, r0, #0
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	1dbb      	adds	r3, r7, #6
 8001f78:	1c0a      	adds	r2, r1, #0
 8001f7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2241      	movs	r2, #65	; 0x41
 8001f80:	5c9b      	ldrb	r3, [r3, r2]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d000      	beq.n	8001f8a <HAL_I2C_Mem_Read+0x32>
 8001f88:	e110      	b.n	80021ac <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <HAL_I2C_Mem_Read+0x42>
 8001f90:	232c      	movs	r3, #44	; 0x2c
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	0092      	lsls	r2, r2, #2
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e103      	b.n	80021ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	5c9b      	ldrb	r3, [r3, r2]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_I2C_Mem_Read+0x5c>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e0fc      	b.n	80021ae <HAL_I2C_Mem_Read+0x256>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	2101      	movs	r1, #1
 8001fba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fbc:	f7ff fbb8 	bl	8001730 <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	0219      	lsls	r1, r3, #8
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2319      	movs	r3, #25
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f000 f9dd 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 8001fd6:	1e03      	subs	r3, r0, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0e7      	b.n	80021ae <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2241      	movs	r2, #65	; 0x41
 8001fe2:	2122      	movs	r1, #34	; 0x22
 8001fe4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2242      	movs	r2, #66	; 0x42
 8001fea:	2140      	movs	r1, #64	; 0x40
 8001fec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	222c      	movs	r2, #44	; 0x2c
 8001ffe:	18ba      	adds	r2, r7, r2
 8002000:	8812      	ldrh	r2, [r2, #0]
 8002002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800200a:	1dbb      	adds	r3, r7, #6
 800200c:	881c      	ldrh	r4, [r3, #0]
 800200e:	2308      	movs	r3, #8
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	881a      	ldrh	r2, [r3, #0]
 8002014:	230a      	movs	r3, #10
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	8819      	ldrh	r1, [r3, #0]
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	0023      	movs	r3, r4
 8002026:	f000 f92f 	bl	8002288 <I2C_RequestMemoryRead>
 800202a:	1e03      	subs	r3, r0, #0
 800202c:	d005      	beq.n	800203a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2240      	movs	r2, #64	; 0x40
 8002032:	2100      	movs	r1, #0
 8002034:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0b9      	b.n	80021ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	2bff      	cmp	r3, #255	; 0xff
 8002042:	d911      	bls.n	8002068 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	22ff      	movs	r2, #255	; 0xff
 8002048:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204e:	b2da      	uxtb	r2, r3
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	045c      	lsls	r4, r3, #17
 8002054:	230a      	movs	r3, #10
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	8819      	ldrh	r1, [r3, #0]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <HAL_I2C_Mem_Read+0x260>)
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	0023      	movs	r3, r4
 8002062:	f000 fab5 	bl	80025d0 <I2C_TransferConfig>
 8002066:	e012      	b.n	800208e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	b2da      	uxtb	r2, r3
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	049c      	lsls	r4, r3, #18
 800207c:	230a      	movs	r3, #10
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	8819      	ldrh	r1, [r3, #0]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	4b4c      	ldr	r3, [pc, #304]	; (80021b8 <HAL_I2C_Mem_Read+0x260>)
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	0023      	movs	r3, r4
 800208a:	f000 faa1 	bl	80025d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800208e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	0013      	movs	r3, r2
 8002098:	2200      	movs	r2, #0
 800209a:	2104      	movs	r1, #4
 800209c:	f000 f978 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 80020a0:	1e03      	subs	r3, r0, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e082      	b.n	80021ae <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d03a      	beq.n	800215a <HAL_I2C_Mem_Read+0x202>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d136      	bne.n	800215a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	0013      	movs	r3, r2
 80020f6:	2200      	movs	r2, #0
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	f000 f949 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 80020fe:	1e03      	subs	r3, r0, #0
 8002100:	d001      	beq.n	8002106 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e053      	b.n	80021ae <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	2bff      	cmp	r3, #255	; 0xff
 800210e:	d911      	bls.n	8002134 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	22ff      	movs	r2, #255	; 0xff
 8002114:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	b2da      	uxtb	r2, r3
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	045c      	lsls	r4, r3, #17
 8002120:	230a      	movs	r3, #10
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	8819      	ldrh	r1, [r3, #0]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	2300      	movs	r3, #0
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	0023      	movs	r3, r4
 800212e:	f000 fa4f 	bl	80025d0 <I2C_TransferConfig>
 8002132:	e012      	b.n	800215a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	b2da      	uxtb	r2, r3
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	049c      	lsls	r4, r3, #18
 8002148:	230a      	movs	r3, #10
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	8819      	ldrh	r1, [r3, #0]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	2300      	movs	r3, #0
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	0023      	movs	r3, r4
 8002156:	f000 fa3b 	bl	80025d0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d194      	bne.n	800208e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	0018      	movs	r0, r3
 800216c:	f000 f98e 	bl	800248c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002170:	1e03      	subs	r3, r0, #0
 8002172:	d001      	beq.n	8002178 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e01a      	b.n	80021ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2220      	movs	r2, #32
 800217e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	490c      	ldr	r1, [pc, #48]	; (80021bc <HAL_I2C_Mem_Read+0x264>)
 800218c:	400a      	ands	r2, r1
 800218e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2241      	movs	r2, #65	; 0x41
 8002194:	2120      	movs	r1, #32
 8002196:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2242      	movs	r2, #66	; 0x42
 800219c:	2100      	movs	r1, #0
 800219e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	2100      	movs	r1, #0
 80021a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b007      	add	sp, #28
 80021b4:	bd90      	pop	{r4, r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	80002400 	.word	0x80002400
 80021bc:	fe00e800 	.word	0xfe00e800

080021c0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	000c      	movs	r4, r1
 80021ca:	0010      	movs	r0, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	250a      	movs	r5, #10
 80021d0:	197b      	adds	r3, r7, r5
 80021d2:	1c22      	adds	r2, r4, #0
 80021d4:	801a      	strh	r2, [r3, #0]
 80021d6:	2308      	movs	r3, #8
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	1c02      	adds	r2, r0, #0
 80021dc:	801a      	strh	r2, [r3, #0]
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	1c0a      	adds	r2, r1, #0
 80021e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021e4:	1dbb      	adds	r3, r7, #6
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	045c      	lsls	r4, r3, #17
 80021ee:	197b      	adds	r3, r7, r5
 80021f0:	8819      	ldrh	r1, [r3, #0]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	4b23      	ldr	r3, [pc, #140]	; (8002284 <I2C_RequestMemoryWrite+0xc4>)
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	0023      	movs	r3, r4
 80021fa:	f000 f9e9 	bl	80025d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002200:	6a39      	ldr	r1, [r7, #32]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 f902 	bl	800240e <I2C_WaitOnTXISFlagUntilTimeout>
 800220a:	1e03      	subs	r3, r0, #0
 800220c:	d001      	beq.n	8002212 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e033      	b.n	800227a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002212:	1dbb      	adds	r3, r7, #6
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800221a:	2308      	movs	r3, #8
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
 8002228:	e019      	b.n	800225e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800222a:	2308      	movs	r3, #8
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	b29b      	uxth	r3, r3
 8002234:	b2da      	uxtb	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	6a39      	ldr	r1, [r7, #32]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	0018      	movs	r0, r3
 8002244:	f000 f8e3 	bl	800240e <I2C_WaitOnTXISFlagUntilTimeout>
 8002248:	1e03      	subs	r3, r0, #0
 800224a:	d001      	beq.n	8002250 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e014      	b.n	800227a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002250:	2308      	movs	r3, #8
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800225e:	6a3a      	ldr	r2, [r7, #32]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	0013      	movs	r3, r2
 8002268:	2200      	movs	r2, #0
 800226a:	2180      	movs	r1, #128	; 0x80
 800226c:	f000 f890 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d001      	beq.n	8002278 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b004      	add	sp, #16
 8002280:	bdb0      	pop	{r4, r5, r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	80002000 	.word	0x80002000

08002288 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	000c      	movs	r4, r1
 8002292:	0010      	movs	r0, r2
 8002294:	0019      	movs	r1, r3
 8002296:	250a      	movs	r5, #10
 8002298:	197b      	adds	r3, r7, r5
 800229a:	1c22      	adds	r2, r4, #0
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	2308      	movs	r3, #8
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	1c02      	adds	r2, r0, #0
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	1dbb      	adds	r3, r7, #6
 80022a8:	1c0a      	adds	r2, r1, #0
 80022aa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022ac:	1dbb      	adds	r3, r7, #6
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	197b      	adds	r3, r7, r5
 80022b4:	8819      	ldrh	r1, [r3, #0]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	4b23      	ldr	r3, [pc, #140]	; (8002348 <I2C_RequestMemoryRead+0xc0>)
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2300      	movs	r3, #0
 80022be:	f000 f987 	bl	80025d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c4:	6a39      	ldr	r1, [r7, #32]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	0018      	movs	r0, r3
 80022ca:	f000 f8a0 	bl	800240e <I2C_WaitOnTXISFlagUntilTimeout>
 80022ce:	1e03      	subs	r3, r0, #0
 80022d0:	d001      	beq.n	80022d6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e033      	b.n	800233e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022d6:	1dbb      	adds	r3, r7, #6
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d107      	bne.n	80022ee <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022de:	2308      	movs	r3, #8
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
 80022ec:	e019      	b.n	8002322 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022ee:	2308      	movs	r3, #8
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002302:	6a39      	ldr	r1, [r7, #32]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	0018      	movs	r0, r3
 8002308:	f000 f881 	bl	800240e <I2C_WaitOnTXISFlagUntilTimeout>
 800230c:	1e03      	subs	r3, r0, #0
 800230e:	d001      	beq.n	8002314 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e014      	b.n	800233e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002314:	2308      	movs	r3, #8
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002322:	6a3a      	ldr	r2, [r7, #32]
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	0013      	movs	r3, r2
 800232c:	2200      	movs	r2, #0
 800232e:	2140      	movs	r1, #64	; 0x40
 8002330:	f000 f82e 	bl	8002390 <I2C_WaitOnFlagUntilTimeout>
 8002334:	1e03      	subs	r3, r0, #0
 8002336:	d001      	beq.n	800233c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b004      	add	sp, #16
 8002344:	bdb0      	pop	{r4, r5, r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	80002000 	.word	0x80002000

0800234c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2202      	movs	r2, #2
 800235c:	4013      	ands	r3, r2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d103      	bne.n	800236a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2200      	movs	r2, #0
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2201      	movs	r2, #1
 8002372:	4013      	ands	r3, r2
 8002374:	2b01      	cmp	r3, #1
 8002376:	d007      	beq.n	8002388 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2101      	movs	r1, #1
 8002384:	430a      	orrs	r2, r1
 8002386:	619a      	str	r2, [r3, #24]
  }
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	1dfb      	adds	r3, r7, #7
 800239e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a0:	e021      	b.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	d01e      	beq.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a8:	f7ff f9c2 	bl	8001730 <HAL_GetTick>
 80023ac:	0002      	movs	r2, r0
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d302      	bcc.n	80023be <I2C_WaitOnFlagUntilTimeout+0x2e>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	2220      	movs	r2, #32
 80023c4:	431a      	orrs	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2241      	movs	r2, #65	; 0x41
 80023ce:	2120      	movs	r1, #32
 80023d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2242      	movs	r2, #66	; 0x42
 80023d6:	2100      	movs	r1, #0
 80023d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2240      	movs	r2, #64	; 0x40
 80023de:	2100      	movs	r1, #0
 80023e0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	4013      	ands	r3, r2
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	425a      	negs	r2, r3
 80023f6:	4153      	adcs	r3, r2
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	001a      	movs	r2, r3
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d0ce      	beq.n	80023a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b004      	add	sp, #16
 800240c:	bd80      	pop	{r7, pc}

0800240e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800241a:	e02b      	b.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	0018      	movs	r0, r3
 8002424:	f000 f86e 	bl	8002504 <I2C_IsAcknowledgeFailed>
 8002428:	1e03      	subs	r3, r0, #0
 800242a:	d001      	beq.n	8002430 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e029      	b.n	8002484 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	3301      	adds	r3, #1
 8002434:	d01e      	beq.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002436:	f7ff f97b 	bl	8001730 <HAL_GetTick>
 800243a:	0002      	movs	r2, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	429a      	cmp	r2, r3
 8002444:	d302      	bcc.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d113      	bne.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002450:	2220      	movs	r2, #32
 8002452:	431a      	orrs	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2241      	movs	r2, #65	; 0x41
 800245c:	2120      	movs	r1, #32
 800245e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2242      	movs	r2, #66	; 0x42
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2240      	movs	r2, #64	; 0x40
 800246c:	2100      	movs	r1, #0
 800246e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e007      	b.n	8002484 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d1cc      	bne.n	800241c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b004      	add	sp, #16
 800248a:	bd80      	pop	{r7, pc}

0800248c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002498:	e028      	b.n	80024ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 f82f 	bl	8002504 <I2C_IsAcknowledgeFailed>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d001      	beq.n	80024ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e026      	b.n	80024fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ae:	f7ff f93f 	bl	8001730 <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d302      	bcc.n	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d113      	bne.n	80024ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	2220      	movs	r2, #32
 80024ca:	431a      	orrs	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2241      	movs	r2, #65	; 0x41
 80024d4:	2120      	movs	r1, #32
 80024d6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2242      	movs	r2, #66	; 0x42
 80024dc:	2100      	movs	r1, #0
 80024de:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2240      	movs	r2, #64	; 0x40
 80024e4:	2100      	movs	r1, #0
 80024e6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e007      	b.n	80024fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2220      	movs	r2, #32
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d1cf      	bne.n	800249a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}

08002504 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2210      	movs	r2, #16
 8002518:	4013      	ands	r3, r2
 800251a:	2b10      	cmp	r3, #16
 800251c:	d151      	bne.n	80025c2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800251e:	e021      	b.n	8002564 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	3301      	adds	r3, #1
 8002524:	d01e      	beq.n	8002564 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002526:	f7ff f903 	bl	8001730 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <I2C_IsAcknowledgeFailed+0x38>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d113      	bne.n	8002564 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	2220      	movs	r2, #32
 8002542:	431a      	orrs	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2241      	movs	r2, #65	; 0x41
 800254c:	2120      	movs	r1, #32
 800254e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2242      	movs	r2, #66	; 0x42
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2240      	movs	r2, #64	; 0x40
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e02f      	b.n	80025c4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2220      	movs	r2, #32
 800256c:	4013      	ands	r3, r2
 800256e:	2b20      	cmp	r3, #32
 8002570:	d1d6      	bne.n	8002520 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2210      	movs	r2, #16
 8002578:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2220      	movs	r2, #32
 8002580:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff fee1 	bl	800234c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	490d      	ldr	r1, [pc, #52]	; (80025cc <I2C_IsAcknowledgeFailed+0xc8>)
 8002596:	400a      	ands	r2, r1
 8002598:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	2204      	movs	r2, #4
 80025a0:	431a      	orrs	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2241      	movs	r2, #65	; 0x41
 80025aa:	2120      	movs	r1, #32
 80025ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2242      	movs	r2, #66	; 0x42
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	2100      	movs	r1, #0
 80025bc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b004      	add	sp, #16
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	fe00e800 	.word	0xfe00e800

080025d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	0008      	movs	r0, r1
 80025da:	0011      	movs	r1, r2
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	240a      	movs	r4, #10
 80025e0:	193b      	adds	r3, r7, r4
 80025e2:	1c02      	adds	r2, r0, #0
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	2009      	movs	r0, #9
 80025e8:	183b      	adds	r3, r7, r0
 80025ea:	1c0a      	adds	r2, r1, #0
 80025ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	0d51      	lsrs	r1, r2, #21
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	00d2      	lsls	r2, r2, #3
 80025fc:	400a      	ands	r2, r1
 80025fe:	490e      	ldr	r1, [pc, #56]	; (8002638 <I2C_TransferConfig+0x68>)
 8002600:	430a      	orrs	r2, r1
 8002602:	43d2      	mvns	r2, r2
 8002604:	401a      	ands	r2, r3
 8002606:	0011      	movs	r1, r2
 8002608:	193b      	adds	r3, r7, r4
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	059b      	lsls	r3, r3, #22
 800260e:	0d9a      	lsrs	r2, r3, #22
 8002610:	183b      	adds	r3, r7, r0
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	0418      	lsls	r0, r3, #16
 8002616:	23ff      	movs	r3, #255	; 0xff
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	4003      	ands	r3, r0
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	431a      	orrs	r2, r3
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b005      	add	sp, #20
 8002634:	bd90      	pop	{r4, r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	03ff63ff 	.word	0x03ff63ff

0800263c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2241      	movs	r2, #65	; 0x41
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b20      	cmp	r3, #32
 8002650:	d138      	bne.n	80026c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2240      	movs	r2, #64	; 0x40
 8002656:	5c9b      	ldrb	r3, [r3, r2]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800265c:	2302      	movs	r3, #2
 800265e:	e032      	b.n	80026c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2240      	movs	r2, #64	; 0x40
 8002664:	2101      	movs	r1, #1
 8002666:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2241      	movs	r2, #65	; 0x41
 800266c:	2124      	movs	r1, #36	; 0x24
 800266e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2101      	movs	r1, #1
 800267c:	438a      	bics	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4911      	ldr	r1, [pc, #68]	; (80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800268c:	400a      	ands	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2101      	movs	r1, #1
 80026ac:	430a      	orrs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2241      	movs	r2, #65	; 0x41
 80026b4:	2120      	movs	r1, #32
 80026b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2240      	movs	r2, #64	; 0x40
 80026bc:	2100      	movs	r1, #0
 80026be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	0018      	movs	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b002      	add	sp, #8
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	ffffefff 	.word	0xffffefff

080026d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2241      	movs	r2, #65	; 0x41
 80026e2:	5c9b      	ldrb	r3, [r3, r2]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d139      	bne.n	800275e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2240      	movs	r2, #64	; 0x40
 80026ee:	5c9b      	ldrb	r3, [r3, r2]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e033      	b.n	8002760 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2240      	movs	r2, #64	; 0x40
 80026fc:	2101      	movs	r1, #1
 80026fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2241      	movs	r2, #65	; 0x41
 8002704:	2124      	movs	r1, #36	; 0x24
 8002706:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2101      	movs	r1, #1
 8002714:	438a      	bics	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2101      	movs	r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2241      	movs	r2, #65	; 0x41
 800274e:	2120      	movs	r1, #32
 8002750:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2240      	movs	r2, #64	; 0x40
 8002756:	2100      	movs	r1, #0
 8002758:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
  }
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	b004      	add	sp, #16
 8002766:	bd80      	pop	{r7, pc}
 8002768:	fffff0ff 	.word	0xfffff0ff

0800276c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e305      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2201      	movs	r2, #1
 8002784:	4013      	ands	r3, r2
 8002786:	d100      	bne.n	800278a <HAL_RCC_OscConfig+0x1e>
 8002788:	e08d      	b.n	80028a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800278a:	4bc5      	ldr	r3, [pc, #788]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	220c      	movs	r2, #12
 8002790:	4013      	ands	r3, r2
 8002792:	2b04      	cmp	r3, #4
 8002794:	d00e      	beq.n	80027b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002796:	4bc2      	ldr	r3, [pc, #776]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	220c      	movs	r2, #12
 800279c:	4013      	ands	r3, r2
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d116      	bne.n	80027d0 <HAL_RCC_OscConfig+0x64>
 80027a2:	4bbf      	ldr	r3, [pc, #764]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	23c0      	movs	r3, #192	; 0xc0
 80027a8:	025b      	lsls	r3, r3, #9
 80027aa:	401a      	ands	r2, r3
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	025b      	lsls	r3, r3, #9
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	4bba      	ldr	r3, [pc, #744]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	029b      	lsls	r3, r3, #10
 80027bc:	4013      	ands	r3, r2
 80027be:	d100      	bne.n	80027c2 <HAL_RCC_OscConfig+0x56>
 80027c0:	e070      	b.n	80028a4 <HAL_RCC_OscConfig+0x138>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d000      	beq.n	80027cc <HAL_RCC_OscConfig+0x60>
 80027ca:	e06b      	b.n	80028a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e2dc      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_OscConfig+0x7c>
 80027d8:	4bb1      	ldr	r3, [pc, #708]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4bb0      	ldr	r3, [pc, #704]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	0249      	lsls	r1, r1, #9
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e02f      	b.n	8002848 <HAL_RCC_OscConfig+0xdc>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10c      	bne.n	800280a <HAL_RCC_OscConfig+0x9e>
 80027f0:	4bab      	ldr	r3, [pc, #684]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4baa      	ldr	r3, [pc, #680]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80027f6:	49ab      	ldr	r1, [pc, #684]	; (8002aa4 <HAL_RCC_OscConfig+0x338>)
 80027f8:	400a      	ands	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	4ba8      	ldr	r3, [pc, #672]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4ba7      	ldr	r3, [pc, #668]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002802:	49a9      	ldr	r1, [pc, #676]	; (8002aa8 <HAL_RCC_OscConfig+0x33c>)
 8002804:	400a      	ands	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e01e      	b.n	8002848 <HAL_RCC_OscConfig+0xdc>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d10e      	bne.n	8002830 <HAL_RCC_OscConfig+0xc4>
 8002812:	4ba3      	ldr	r3, [pc, #652]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4ba2      	ldr	r3, [pc, #648]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	02c9      	lsls	r1, r1, #11
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	4b9f      	ldr	r3, [pc, #636]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b9e      	ldr	r3, [pc, #632]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002826:	2180      	movs	r1, #128	; 0x80
 8002828:	0249      	lsls	r1, r1, #9
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0xdc>
 8002830:	4b9b      	ldr	r3, [pc, #620]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b9a      	ldr	r3, [pc, #616]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002836:	499b      	ldr	r1, [pc, #620]	; (8002aa4 <HAL_RCC_OscConfig+0x338>)
 8002838:	400a      	ands	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	4b98      	ldr	r3, [pc, #608]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b97      	ldr	r3, [pc, #604]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002842:	4999      	ldr	r1, [pc, #612]	; (8002aa8 <HAL_RCC_OscConfig+0x33c>)
 8002844:	400a      	ands	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d014      	beq.n	800287a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe ff6e 	bl	8001730 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285a:	f7fe ff69 	bl	8001730 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b64      	cmp	r3, #100	; 0x64
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e28e      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286c:	4b8c      	ldr	r3, [pc, #560]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	029b      	lsls	r3, r3, #10
 8002874:	4013      	ands	r3, r2
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0xee>
 8002878:	e015      	b.n	80028a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe ff59 	bl	8001730 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe ff54 	bl	8001730 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e279      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	4b82      	ldr	r3, [pc, #520]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	029b      	lsls	r3, r3, #10
 800289e:	4013      	ands	r3, r2
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x118>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2202      	movs	r2, #2
 80028ac:	4013      	ands	r3, r2
 80028ae:	d100      	bne.n	80028b2 <HAL_RCC_OscConfig+0x146>
 80028b0:	e06c      	b.n	800298c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028b2:	4b7b      	ldr	r3, [pc, #492]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	220c      	movs	r2, #12
 80028b8:	4013      	ands	r3, r2
 80028ba:	d00e      	beq.n	80028da <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028bc:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	220c      	movs	r2, #12
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d11f      	bne.n	8002908 <HAL_RCC_OscConfig+0x19c>
 80028c8:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	23c0      	movs	r3, #192	; 0xc0
 80028ce:	025b      	lsls	r3, r3, #9
 80028d0:	401a      	ands	r2, r3
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d116      	bne.n	8002908 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	4b71      	ldr	r3, [pc, #452]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_OscConfig+0x184>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e24c      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b6b      	ldr	r3, [pc, #428]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	22f8      	movs	r2, #248	; 0xf8
 80028f6:	4393      	bics	r3, r2
 80028f8:	0019      	movs	r1, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00da      	lsls	r2, r3, #3
 8002900:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002906:	e041      	b.n	800298c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d024      	beq.n	800295a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002910:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002916:	2101      	movs	r1, #1
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe ff08 	bl	8001730 <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe ff03 	bl	8001730 <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e228      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2202      	movs	r2, #2
 800293e:	4013      	ands	r3, r2
 8002940:	d0f1      	beq.n	8002926 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002942:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	22f8      	movs	r2, #248	; 0xf8
 8002948:	4393      	bics	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	00da      	lsls	r2, r3, #3
 8002952:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e018      	b.n	800298c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b51      	ldr	r3, [pc, #324]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002960:	2101      	movs	r1, #1
 8002962:	438a      	bics	r2, r1
 8002964:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7fe fee3 	bl	8001730 <HAL_GetTick>
 800296a:	0003      	movs	r3, r0
 800296c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002970:	f7fe fede 	bl	8001730 <HAL_GetTick>
 8002974:	0002      	movs	r2, r0
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e203      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2202      	movs	r2, #2
 8002988:	4013      	ands	r3, r2
 800298a:	d1f1      	bne.n	8002970 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2208      	movs	r2, #8
 8002992:	4013      	ands	r3, r2
 8002994:	d036      	beq.n	8002a04 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d019      	beq.n	80029d2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299e:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80029a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80029a4:	2101      	movs	r1, #1
 80029a6:	430a      	orrs	r2, r1
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7fe fec1 	bl	8001730 <HAL_GetTick>
 80029ae:	0003      	movs	r3, r0
 80029b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fe febc 	bl	8001730 <HAL_GetTick>
 80029b8:	0002      	movs	r2, r0
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1e1      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2202      	movs	r2, #2
 80029cc:	4013      	ands	r3, r2
 80029ce:	d0f1      	beq.n	80029b4 <HAL_RCC_OscConfig+0x248>
 80029d0:	e018      	b.n	8002a04 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d2:	4b33      	ldr	r3, [pc, #204]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80029d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d6:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80029d8:	2101      	movs	r1, #1
 80029da:	438a      	bics	r2, r1
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7fe fea7 	bl	8001730 <HAL_GetTick>
 80029e2:	0003      	movs	r3, r0
 80029e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e8:	f7fe fea2 	bl	8001730 <HAL_GetTick>
 80029ec:	0002      	movs	r2, r0
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e1c7      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2202      	movs	r2, #2
 8002a00:	4013      	ands	r3, r2
 8002a02:	d1f1      	bne.n	80029e8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d100      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2a4>
 8002a0e:	e0b5      	b.n	8002b7c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a10:	231f      	movs	r3, #31
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	055b      	lsls	r3, r3, #21
 8002a20:	4013      	ands	r3, r2
 8002a22:	d111      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002a2a:	2180      	movs	r1, #128	; 0x80
 8002a2c:	0549      	lsls	r1, r1, #21
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	61da      	str	r2, [r3, #28]
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	055b      	lsls	r3, r3, #21
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a40:	231f      	movs	r3, #31
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_RCC_OscConfig+0x340>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	d11a      	bne.n	8002a8a <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_RCC_OscConfig+0x340>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCC_OscConfig+0x340>)
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	0049      	lsls	r1, r1, #1
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fe65 	bl	8001730 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7fe fe60 	bl	8001730 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e185      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_OscConfig+0x340>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10e      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x344>
 8002a92:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002a94:	6a1a      	ldr	r2, [r3, #32]
 8002a96:	4b02      	ldr	r3, [pc, #8]	; (8002aa0 <HAL_RCC_OscConfig+0x334>)
 8002a98:	2101      	movs	r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	621a      	str	r2, [r3, #32]
 8002a9e:	e035      	b.n	8002b0c <HAL_RCC_OscConfig+0x3a0>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	fffeffff 	.word	0xfffeffff
 8002aa8:	fffbffff 	.word	0xfffbffff
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x366>
 8002ab8:	4bb6      	ldr	r3, [pc, #728]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	4bb5      	ldr	r3, [pc, #724]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002abe:	2101      	movs	r1, #1
 8002ac0:	438a      	bics	r2, r1
 8002ac2:	621a      	str	r2, [r3, #32]
 8002ac4:	4bb3      	ldr	r3, [pc, #716]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	4bb2      	ldr	r3, [pc, #712]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002aca:	2104      	movs	r1, #4
 8002acc:	438a      	bics	r2, r1
 8002ace:	621a      	str	r2, [r3, #32]
 8002ad0:	e01c      	b.n	8002b0c <HAL_RCC_OscConfig+0x3a0>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x388>
 8002ada:	4bae      	ldr	r3, [pc, #696]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002adc:	6a1a      	ldr	r2, [r3, #32]
 8002ade:	4bad      	ldr	r3, [pc, #692]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	621a      	str	r2, [r3, #32]
 8002ae6:	4bab      	ldr	r3, [pc, #684]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002ae8:	6a1a      	ldr	r2, [r3, #32]
 8002aea:	4baa      	ldr	r3, [pc, #680]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002aec:	2101      	movs	r1, #1
 8002aee:	430a      	orrs	r2, r1
 8002af0:	621a      	str	r2, [r3, #32]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0x3a0>
 8002af4:	4ba7      	ldr	r3, [pc, #668]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	4ba6      	ldr	r3, [pc, #664]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	438a      	bics	r2, r1
 8002afe:	621a      	str	r2, [r3, #32]
 8002b00:	4ba4      	ldr	r3, [pc, #656]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002b02:	6a1a      	ldr	r2, [r3, #32]
 8002b04:	4ba3      	ldr	r3, [pc, #652]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002b06:	2104      	movs	r1, #4
 8002b08:	438a      	bics	r2, r1
 8002b0a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d014      	beq.n	8002b3e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7fe fe0c 	bl	8001730 <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	e009      	b.n	8002b32 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fe07 	bl	8001730 <HAL_GetTick>
 8002b22:	0002      	movs	r2, r0
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	4a9b      	ldr	r2, [pc, #620]	; (8002d98 <HAL_RCC_OscConfig+0x62c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e12b      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b32:	4b98      	ldr	r3, [pc, #608]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	2202      	movs	r2, #2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x3b2>
 8002b3c:	e013      	b.n	8002b66 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fdf7 	bl	8001730 <HAL_GetTick>
 8002b42:	0003      	movs	r3, r0
 8002b44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b46:	e009      	b.n	8002b5c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe fdf2 	bl	8001730 <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	4a91      	ldr	r2, [pc, #580]	; (8002d98 <HAL_RCC_OscConfig+0x62c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e116      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5c:	4b8d      	ldr	r3, [pc, #564]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	2202      	movs	r2, #2
 8002b62:	4013      	ands	r3, r2
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b66:	231f      	movs	r3, #31
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b88      	ldr	r3, [pc, #544]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	4b87      	ldr	r3, [pc, #540]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002b76:	4989      	ldr	r1, [pc, #548]	; (8002d9c <HAL_RCC_OscConfig+0x630>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2210      	movs	r2, #16
 8002b82:	4013      	ands	r3, r2
 8002b84:	d063      	beq.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d12a      	bne.n	8002be4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b8e:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b92:	4b80      	ldr	r3, [pc, #512]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002b94:	2104      	movs	r1, #4
 8002b96:	430a      	orrs	r2, r1
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b9a:	4b7e      	ldr	r3, [pc, #504]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9e:	4b7d      	ldr	r3, [pc, #500]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fdc3 	bl	8001730 <HAL_GetTick>
 8002baa:	0003      	movs	r3, r0
 8002bac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bb0:	f7fe fdbe 	bl	8001730 <HAL_GetTick>
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0e3      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bc2:	4b74      	ldr	r3, [pc, #464]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d0f1      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bcc:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	22f8      	movs	r2, #248	; 0xf8
 8002bd2:	4393      	bics	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	00da      	lsls	r2, r3, #3
 8002bdc:	4b6d      	ldr	r3, [pc, #436]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002bde:	430a      	orrs	r2, r1
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34
 8002be2:	e034      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	3305      	adds	r3, #5
 8002bea:	d111      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002bec:	4b69      	ldr	r3, [pc, #420]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf0:	4b68      	ldr	r3, [pc, #416]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	438a      	bics	r2, r1
 8002bf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bf8:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfc:	22f8      	movs	r2, #248	; 0xf8
 8002bfe:	4393      	bics	r3, r2
 8002c00:	0019      	movs	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	00da      	lsls	r2, r3, #3
 8002c08:	4b62      	ldr	r3, [pc, #392]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c0e:	e01e      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c10:	4b60      	ldr	r3, [pc, #384]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c14:	4b5f      	ldr	r3, [pc, #380]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002c16:	2104      	movs	r1, #4
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c1c:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c20:	4b5c      	ldr	r3, [pc, #368]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	438a      	bics	r2, r1
 8002c26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7fe fd82 	bl	8001730 <HAL_GetTick>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c32:	f7fe fd7d 	bl	8001730 <HAL_GetTick>
 8002c36:	0002      	movs	r2, r0
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0a2      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c44:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d1f1      	bne.n	8002c32 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d100      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4ec>
 8002c56:	e097      	b.n	8002d88 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c58:	4b4e      	ldr	r3, [pc, #312]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	220c      	movs	r2, #12
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d100      	bne.n	8002c66 <HAL_RCC_OscConfig+0x4fa>
 8002c64:	e06b      	b.n	8002d3e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d14c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6e:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b48      	ldr	r3, [pc, #288]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002c74:	494a      	ldr	r1, [pc, #296]	; (8002da0 <HAL_RCC_OscConfig+0x634>)
 8002c76:	400a      	ands	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fd59 	bl	8001730 <HAL_GetTick>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe fd54 	bl	8001730 <HAL_GetTick>
 8002c88:	0002      	movs	r2, r0
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e079      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c96:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	2380      	movs	r3, #128	; 0x80
 8002c9c:	049b      	lsls	r3, r3, #18
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca2:	4b3c      	ldr	r3, [pc, #240]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	4393      	bics	r3, r2
 8002caa:	0019      	movs	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4a3a      	ldr	r2, [pc, #232]	; (8002da4 <HAL_RCC_OscConfig+0x638>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd0:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	0449      	lsls	r1, r1, #17
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7fe fd27 	bl	8001730 <HAL_GetTick>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe fd22 	bl	8001730 <HAL_GetTick>
 8002cec:	0002      	movs	r2, r0
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e047      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfa:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	049b      	lsls	r3, r3, #18
 8002d02:	4013      	ands	r3, r2
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x57c>
 8002d06:	e03f      	b.n	8002d88 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002d0e:	4924      	ldr	r1, [pc, #144]	; (8002da0 <HAL_RCC_OscConfig+0x634>)
 8002d10:	400a      	ands	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fd0c 	bl	8001730 <HAL_GetTick>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe fd07 	bl	8001730 <HAL_GetTick>
 8002d22:	0002      	movs	r2, r0
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e02c      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	049b      	lsls	r3, r3, #18
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d1f0      	bne.n	8002d1e <HAL_RCC_OscConfig+0x5b2>
 8002d3c:	e024      	b.n	8002d88 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e01f      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_RCC_OscConfig+0x628>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	23c0      	movs	r3, #192	; 0xc0
 8002d5a:	025b      	lsls	r3, r3, #9
 8002d5c:	401a      	ands	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d10e      	bne.n	8002d84 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	220f      	movs	r2, #15
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	23f0      	movs	r3, #240	; 0xf0
 8002d78:	039b      	lsls	r3, r3, #14
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b008      	add	sp, #32
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	40021000 	.word	0x40021000
 8002d98:	00001388 	.word	0x00001388
 8002d9c:	efffffff 	.word	0xefffffff
 8002da0:	feffffff 	.word	0xfeffffff
 8002da4:	ffc27fff 	.word	0xffc27fff

08002da8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0b3      	b.n	8002f24 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <HAL_RCC_ClockConfig+0x184>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d911      	bls.n	8002dee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b58      	ldr	r3, [pc, #352]	; (8002f2c <HAL_RCC_ClockConfig+0x184>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	4b55      	ldr	r3, [pc, #340]	; (8002f2c <HAL_RCC_ClockConfig+0x184>)
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ddc:	4b53      	ldr	r3, [pc, #332]	; (8002f2c <HAL_RCC_ClockConfig+0x184>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	4013      	ands	r3, r2
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e09a      	b.n	8002f24 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	d015      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d006      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e02:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002e08:	21e0      	movs	r1, #224	; 0xe0
 8002e0a:	00c9      	lsls	r1, r1, #3
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	22f0      	movs	r2, #240	; 0xf0
 8002e16:	4393      	bics	r3, r2
 8002e18:	0019      	movs	r1, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	4b44      	ldr	r3, [pc, #272]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d040      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	029b      	lsls	r3, r3, #10
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d114      	bne.n	8002e6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e06e      	b.n	8002f24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	049b      	lsls	r3, r3, #18
 8002e56:	4013      	ands	r3, r2
 8002e58:	d108      	bne.n	8002e6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e062      	b.n	8002f24 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2202      	movs	r2, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e05b      	b.n	8002f24 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e6c:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	4393      	bics	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e80:	f7fe fc56 	bl	8001730 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e88:	e009      	b.n	8002e9e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8a:	f7fe fc51 	bl	8001730 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	4a27      	ldr	r2, [pc, #156]	; (8002f34 <HAL_RCC_ClockConfig+0x18c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e042      	b.n	8002f24 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d1ec      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <HAL_RCC_ClockConfig+0x184>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d211      	bcs.n	8002ee2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCC_ClockConfig+0x184>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <HAL_RCC_ClockConfig+0x184>)
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed0:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <HAL_RCC_ClockConfig+0x184>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e020      	b.n	8002f24 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_RCC_ClockConfig+0x190>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f00:	f000 f820 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002f04:	0001      	movs	r1, r0
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_RCC_ClockConfig+0x188>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	4013      	ands	r3, r2
 8002f10:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <HAL_RCC_ClockConfig+0x194>)
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	000a      	movs	r2, r1
 8002f16:	40da      	lsrs	r2, r3
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x198>)
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7fe fbc1 	bl	80016a4 <HAL_InitTick>
  
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b004      	add	sp, #16
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40021000 	.word	0x40021000
 8002f34:	00001388 	.word	0x00001388
 8002f38:	fffff8ff 	.word	0xfffff8ff
 8002f3c:	08003de0 	.word	0x08003de0
 8002f40:	20000000 	.word	0x20000000

08002f44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b08f      	sub	sp, #60	; 0x3c
 8002f48:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002f4a:	2314      	movs	r3, #20
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f52:	c313      	stmia	r3!, {r0, r1, r4}
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	4a2a      	ldr	r2, [pc, #168]	; (8003004 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f5e:	c313      	stmia	r3!, {r0, r1, r4}
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002f78:	4b23      	ldr	r3, [pc, #140]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	220c      	movs	r2, #12
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d002      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x4a>
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d003      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x50>
 8002f8c:	e02f      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	; (800300c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f92:	e02f      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	0c9b      	lsrs	r3, r3, #18
 8002f98:	220f      	movs	r2, #15
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2214      	movs	r2, #20
 8002f9e:	18ba      	adds	r2, r7, r2
 8002fa0:	5cd3      	ldrb	r3, [r2, r3]
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	220f      	movs	r2, #15
 8002faa:	4013      	ands	r3, r2
 8002fac:	1d3a      	adds	r2, r7, #4
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb4:	23c0      	movs	r3, #192	; 0xc0
 8002fb6:	025b      	lsls	r3, r3, #9
 8002fb8:	401a      	ands	r2, r3
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	025b      	lsls	r3, r3, #9
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fc4:	4811      	ldr	r0, [pc, #68]	; (800300c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fc6:	f7fd f89f 	bl	8000108 <__udivsi3>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	001a      	movs	r2, r3
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	4353      	muls	r3, r2
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd8:	480c      	ldr	r0, [pc, #48]	; (800300c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fda:	f7fd f895 	bl	8000108 <__udivsi3>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	4353      	muls	r3, r2
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fec:	e002      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ff0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ff2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b00f      	add	sp, #60	; 0x3c
 8002ffc:	bd90      	pop	{r4, r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	08003d80 	.word	0x08003d80
 8003004:	08003d90 	.word	0x08003d90
 8003008:	40021000 	.word	0x40021000
 800300c:	007a1200 	.word	0x007a1200

08003010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003014:	4b02      	ldr	r3, [pc, #8]	; (8003020 <HAL_RCC_GetHCLKFreq+0x10>)
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	20000000 	.word	0x20000000

08003024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003028:	f7ff fff2 	bl	8003010 <HAL_RCC_GetHCLKFreq>
 800302c:	0001      	movs	r1, r0
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	2207      	movs	r2, #7
 8003036:	4013      	ands	r3, r2
 8003038:	4a04      	ldr	r2, [pc, #16]	; (800304c <HAL_RCC_GetPCLK1Freq+0x28>)
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	40d9      	lsrs	r1, r3
 800303e:	000b      	movs	r3, r1
}    
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	40021000 	.word	0x40021000
 800304c:	08003df0 	.word	0x08003df0

08003050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e044      	b.n	80030ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2270      	movs	r2, #112	; 0x70
 800306e:	2100      	movs	r1, #0
 8003070:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f7fe fa6d 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2224      	movs	r2, #36	; 0x24
 800307e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2101      	movs	r1, #1
 800308c:	438a      	bics	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	0018      	movs	r0, r3
 8003094:	f000 f8d8 	bl	8003248 <UART_SetConfig>
 8003098:	0003      	movs	r3, r0
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e024      	b.n	80030ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 fa69 	bl	8003584 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	490d      	ldr	r1, [pc, #52]	; (80030f4 <HAL_UART_Init+0xa4>)
 80030be:	400a      	ands	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2108      	movs	r1, #8
 80030ce:	438a      	bics	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2101      	movs	r1, #1
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 fb01 	bl	80036ec <UART_CheckIdleState>
 80030ea:	0003      	movs	r3, r0
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	fffff7ff 	.word	0xfffff7ff

080030f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	1dbb      	adds	r3, r7, #6
 8003106:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310c:	2b20      	cmp	r3, #32
 800310e:	d000      	beq.n	8003112 <HAL_UART_Transmit+0x1a>
 8003110:	e095      	b.n	800323e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_UART_Transmit+0x28>
 8003118:	1dbb      	adds	r3, r7, #6
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e08d      	b.n	8003240 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	015b      	lsls	r3, r3, #5
 800312c:	429a      	cmp	r2, r3
 800312e:	d109      	bne.n	8003144 <HAL_UART_Transmit+0x4c>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2201      	movs	r2, #1
 800313c:	4013      	ands	r3, r2
 800313e:	d001      	beq.n	8003144 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e07d      	b.n	8003240 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2270      	movs	r2, #112	; 0x70
 8003148:	5c9b      	ldrb	r3, [r3, r2]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_UART_Transmit+0x5a>
 800314e:	2302      	movs	r3, #2
 8003150:	e076      	b.n	8003240 <HAL_UART_Transmit+0x148>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2270      	movs	r2, #112	; 0x70
 8003156:	2101      	movs	r1, #1
 8003158:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2221      	movs	r2, #33	; 0x21
 8003164:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003166:	f7fe fae3 	bl	8001730 <HAL_GetTick>
 800316a:	0003      	movs	r3, r0
 800316c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1dba      	adds	r2, r7, #6
 8003172:	2150      	movs	r1, #80	; 0x50
 8003174:	8812      	ldrh	r2, [r2, #0]
 8003176:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1dba      	adds	r2, r7, #6
 800317c:	2152      	movs	r1, #82	; 0x52
 800317e:	8812      	ldrh	r2, [r2, #0]
 8003180:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	015b      	lsls	r3, r3, #5
 800318a:	429a      	cmp	r2, r3
 800318c:	d108      	bne.n	80031a0 <HAL_UART_Transmit+0xa8>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	e003      	b.n	80031a8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031a8:	e02d      	b.n	8003206 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	0013      	movs	r3, r2
 80031b4:	2200      	movs	r2, #0
 80031b6:	2180      	movs	r1, #128	; 0x80
 80031b8:	f000 fade 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 80031bc:	1e03      	subs	r3, r0, #0
 80031be:	d001      	beq.n	80031c4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e03d      	b.n	8003240 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10b      	bne.n	80031e2 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	881a      	ldrh	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	05d2      	lsls	r2, r2, #23
 80031d4:	0dd2      	lsrs	r2, r2, #23
 80031d6:	b292      	uxth	r2, r2
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	3302      	adds	r3, #2
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	e008      	b.n	80031f4 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	781a      	ldrb	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	b292      	uxth	r2, r2
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2252      	movs	r2, #82	; 0x52
 80031f8:	5a9b      	ldrh	r3, [r3, r2]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b299      	uxth	r1, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2252      	movs	r2, #82	; 0x52
 8003204:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2252      	movs	r2, #82	; 0x52
 800320a:	5a9b      	ldrh	r3, [r3, r2]
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1cb      	bne.n	80031aa <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	0013      	movs	r3, r2
 800321c:	2200      	movs	r2, #0
 800321e:	2140      	movs	r1, #64	; 0x40
 8003220:	f000 faaa 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d001      	beq.n	800322c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e009      	b.n	8003240 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2270      	movs	r2, #112	; 0x70
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
  }
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b008      	add	sp, #32
 8003246:	bd80      	pop	{r7, pc}

08003248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003250:	2300      	movs	r3, #0
 8003252:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003254:	2317      	movs	r3, #23
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4ab7      	ldr	r2, [pc, #732]	; (8003558 <UART_SetConfig+0x310>)
 800327c:	4013      	ands	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4ab2      	ldr	r2, [pc, #712]	; (800355c <UART_SetConfig+0x314>)
 8003292:	4013      	ands	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4aa9      	ldr	r2, [pc, #676]	; (8003560 <UART_SetConfig+0x318>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4aa5      	ldr	r2, [pc, #660]	; (8003564 <UART_SetConfig+0x31c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d125      	bne.n	800331e <UART_SetConfig+0xd6>
 80032d2:	4ba5      	ldr	r3, [pc, #660]	; (8003568 <UART_SetConfig+0x320>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	2203      	movs	r2, #3
 80032d8:	4013      	ands	r3, r2
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d00f      	beq.n	80032fe <UART_SetConfig+0xb6>
 80032de:	d304      	bcc.n	80032ea <UART_SetConfig+0xa2>
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d011      	beq.n	8003308 <UART_SetConfig+0xc0>
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d005      	beq.n	80032f4 <UART_SetConfig+0xac>
 80032e8:	e013      	b.n	8003312 <UART_SetConfig+0xca>
 80032ea:	231f      	movs	r3, #31
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]
 80032f2:	e036      	b.n	8003362 <UART_SetConfig+0x11a>
 80032f4:	231f      	movs	r3, #31
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2202      	movs	r2, #2
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e031      	b.n	8003362 <UART_SetConfig+0x11a>
 80032fe:	231f      	movs	r3, #31
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	2204      	movs	r2, #4
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	e02c      	b.n	8003362 <UART_SetConfig+0x11a>
 8003308:	231f      	movs	r3, #31
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	2208      	movs	r2, #8
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e027      	b.n	8003362 <UART_SetConfig+0x11a>
 8003312:	231f      	movs	r3, #31
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	2210      	movs	r2, #16
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	e021      	b.n	8003362 <UART_SetConfig+0x11a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a92      	ldr	r2, [pc, #584]	; (800356c <UART_SetConfig+0x324>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d104      	bne.n	8003332 <UART_SetConfig+0xea>
 8003328:	231f      	movs	r3, #31
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e017      	b.n	8003362 <UART_SetConfig+0x11a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a8e      	ldr	r2, [pc, #568]	; (8003570 <UART_SetConfig+0x328>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d104      	bne.n	8003346 <UART_SetConfig+0xfe>
 800333c:	231f      	movs	r3, #31
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e00d      	b.n	8003362 <UART_SetConfig+0x11a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a8a      	ldr	r2, [pc, #552]	; (8003574 <UART_SetConfig+0x32c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d104      	bne.n	800335a <UART_SetConfig+0x112>
 8003350:	231f      	movs	r3, #31
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	e003      	b.n	8003362 <UART_SetConfig+0x11a>
 800335a:	231f      	movs	r3, #31
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	2210      	movs	r2, #16
 8003360:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	429a      	cmp	r2, r3
 800336c:	d000      	beq.n	8003370 <UART_SetConfig+0x128>
 800336e:	e07d      	b.n	800346c <UART_SetConfig+0x224>
  {
    switch (clocksource)
 8003370:	231f      	movs	r3, #31
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d01c      	beq.n	80033b4 <UART_SetConfig+0x16c>
 800337a:	dc02      	bgt.n	8003382 <UART_SetConfig+0x13a>
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <UART_SetConfig+0x144>
 8003380:	e04b      	b.n	800341a <UART_SetConfig+0x1d2>
 8003382:	2b04      	cmp	r3, #4
 8003384:	d025      	beq.n	80033d2 <UART_SetConfig+0x18a>
 8003386:	2b08      	cmp	r3, #8
 8003388:	d037      	beq.n	80033fa <UART_SetConfig+0x1b2>
 800338a:	e046      	b.n	800341a <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800338c:	f7ff fe4a 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 8003390:	0003      	movs	r3, r0
 8003392:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	005a      	lsls	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	18d2      	adds	r2, r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0019      	movs	r1, r3
 80033a6:	0010      	movs	r0, r2
 80033a8:	f7fc feae 	bl	8000108 <__udivsi3>
 80033ac:	0003      	movs	r3, r0
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	61bb      	str	r3, [r7, #24]
        break;
 80033b2:	e037      	b.n	8003424 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	4a6f      	ldr	r2, [pc, #444]	; (8003578 <UART_SetConfig+0x330>)
 80033bc:	189a      	adds	r2, r3, r2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	0019      	movs	r1, r3
 80033c4:	0010      	movs	r0, r2
 80033c6:	f7fc fe9f 	bl	8000108 <__udivsi3>
 80033ca:	0003      	movs	r3, r0
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	61bb      	str	r3, [r7, #24]
        break;
 80033d0:	e028      	b.n	8003424 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033d2:	f7ff fdb7 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 80033d6:	0003      	movs	r3, r0
 80033d8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	005a      	lsls	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	18d2      	adds	r2, r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	0019      	movs	r1, r3
 80033ec:	0010      	movs	r0, r2
 80033ee:	f7fc fe8b 	bl	8000108 <__udivsi3>
 80033f2:	0003      	movs	r3, r0
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	61bb      	str	r3, [r7, #24]
        break;
 80033f8:	e014      	b.n	8003424 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	0252      	lsls	r2, r2, #9
 8003404:	189a      	adds	r2, r3, r2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	0019      	movs	r1, r3
 800340c:	0010      	movs	r0, r2
 800340e:	f7fc fe7b 	bl	8000108 <__udivsi3>
 8003412:	0003      	movs	r3, r0
 8003414:	b29b      	uxth	r3, r3
 8003416:	61bb      	str	r3, [r7, #24]
        break;
 8003418:	e004      	b.n	8003424 <UART_SetConfig+0x1dc>
      default:
        ret = HAL_ERROR;
 800341a:	2317      	movs	r3, #23
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
        break;
 8003422:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b0f      	cmp	r3, #15
 8003428:	d91b      	bls.n	8003462 <UART_SetConfig+0x21a>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4a53      	ldr	r2, [pc, #332]	; (800357c <UART_SetConfig+0x334>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d817      	bhi.n	8003462 <UART_SetConfig+0x21a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	b29a      	uxth	r2, r3
 8003436:	200a      	movs	r0, #10
 8003438:	183b      	adds	r3, r7, r0
 800343a:	210f      	movs	r1, #15
 800343c:	438a      	bics	r2, r1
 800343e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	b29b      	uxth	r3, r3
 8003446:	2207      	movs	r2, #7
 8003448:	4013      	ands	r3, r2
 800344a:	b299      	uxth	r1, r3
 800344c:	183b      	adds	r3, r7, r0
 800344e:	183a      	adds	r2, r7, r0
 8003450:	8812      	ldrh	r2, [r2, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	183a      	adds	r2, r7, r0
 800345c:	8812      	ldrh	r2, [r2, #0]
 800345e:	60da      	str	r2, [r3, #12]
 8003460:	e06c      	b.n	800353c <UART_SetConfig+0x2f4>
    }
    else
    {
      ret = HAL_ERROR;
 8003462:	2317      	movs	r3, #23
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	e067      	b.n	800353c <UART_SetConfig+0x2f4>
    }
  }
  else
  {
    switch (clocksource)
 800346c:	231f      	movs	r3, #31
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d01b      	beq.n	80034ae <UART_SetConfig+0x266>
 8003476:	dc02      	bgt.n	800347e <UART_SetConfig+0x236>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <UART_SetConfig+0x240>
 800347c:	e049      	b.n	8003512 <UART_SetConfig+0x2ca>
 800347e:	2b04      	cmp	r3, #4
 8003480:	d024      	beq.n	80034cc <UART_SetConfig+0x284>
 8003482:	2b08      	cmp	r3, #8
 8003484:	d035      	beq.n	80034f2 <UART_SetConfig+0x2aa>
 8003486:	e044      	b.n	8003512 <UART_SetConfig+0x2ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7ff fdcc 	bl	8003024 <HAL_RCC_GetPCLK1Freq>
 800348c:	0003      	movs	r3, r0
 800348e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	085a      	lsrs	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	18d2      	adds	r2, r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0019      	movs	r1, r3
 80034a0:	0010      	movs	r0, r2
 80034a2:	f7fc fe31 	bl	8000108 <__udivsi3>
 80034a6:	0003      	movs	r3, r0
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	61bb      	str	r3, [r7, #24]
        break;
 80034ac:	e036      	b.n	800351c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	4a32      	ldr	r2, [pc, #200]	; (8003580 <UART_SetConfig+0x338>)
 80034b6:	189a      	adds	r2, r3, r2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	0019      	movs	r1, r3
 80034be:	0010      	movs	r0, r2
 80034c0:	f7fc fe22 	bl	8000108 <__udivsi3>
 80034c4:	0003      	movs	r3, r0
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	61bb      	str	r3, [r7, #24]
        break;
 80034ca:	e027      	b.n	800351c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034cc:	f7ff fd3a 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 80034d0:	0003      	movs	r3, r0
 80034d2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	085a      	lsrs	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	18d2      	adds	r2, r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	0019      	movs	r1, r3
 80034e4:	0010      	movs	r0, r2
 80034e6:	f7fc fe0f 	bl	8000108 <__udivsi3>
 80034ea:	0003      	movs	r3, r0
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	61bb      	str	r3, [r7, #24]
        break;
 80034f0:	e014      	b.n	800351c <UART_SetConfig+0x2d4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	085b      	lsrs	r3, r3, #1
 80034f8:	2280      	movs	r2, #128	; 0x80
 80034fa:	0212      	lsls	r2, r2, #8
 80034fc:	189a      	adds	r2, r3, r2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	0019      	movs	r1, r3
 8003504:	0010      	movs	r0, r2
 8003506:	f7fc fdff 	bl	8000108 <__udivsi3>
 800350a:	0003      	movs	r3, r0
 800350c:	b29b      	uxth	r3, r3
 800350e:	61bb      	str	r3, [r7, #24]
        break;
 8003510:	e004      	b.n	800351c <UART_SetConfig+0x2d4>
      default:
        ret = HAL_ERROR;
 8003512:	2317      	movs	r3, #23
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
        break;
 800351a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b0f      	cmp	r3, #15
 8003520:	d908      	bls.n	8003534 <UART_SetConfig+0x2ec>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4a15      	ldr	r2, [pc, #84]	; (800357c <UART_SetConfig+0x334>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d804      	bhi.n	8003534 <UART_SetConfig+0x2ec>
    {
      huart->Instance->BRR = usartdiv;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	e003      	b.n	800353c <UART_SetConfig+0x2f4>
    }
    else
    {
      ret = HAL_ERROR;
 8003534:	2317      	movs	r3, #23
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003548:	2317      	movs	r3, #23
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	781b      	ldrb	r3, [r3, #0]
}
 800354e:	0018      	movs	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	b008      	add	sp, #32
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	efff69f3 	.word	0xefff69f3
 800355c:	ffffcfff 	.word	0xffffcfff
 8003560:	fffff4ff 	.word	0xfffff4ff
 8003564:	40013800 	.word	0x40013800
 8003568:	40021000 	.word	0x40021000
 800356c:	40004400 	.word	0x40004400
 8003570:	40004800 	.word	0x40004800
 8003574:	40004c00 	.word	0x40004c00
 8003578:	00f42400 	.word	0x00f42400
 800357c:	0000ffff 	.word	0x0000ffff
 8003580:	007a1200 	.word	0x007a1200

08003584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	2201      	movs	r2, #1
 8003592:	4013      	ands	r3, r2
 8003594:	d00b      	beq.n	80035ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a4a      	ldr	r2, [pc, #296]	; (80036c8 <UART_AdvFeatureConfig+0x144>)
 800359e:	4013      	ands	r3, r2
 80035a0:	0019      	movs	r1, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2202      	movs	r2, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	d00b      	beq.n	80035d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4a43      	ldr	r2, [pc, #268]	; (80036cc <UART_AdvFeatureConfig+0x148>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d00b      	beq.n	80035f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4a3b      	ldr	r2, [pc, #236]	; (80036d0 <UART_AdvFeatureConfig+0x14c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2208      	movs	r2, #8
 80035f8:	4013      	ands	r3, r2
 80035fa:	d00b      	beq.n	8003614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a34      	ldr	r2, [pc, #208]	; (80036d4 <UART_AdvFeatureConfig+0x150>)
 8003604:	4013      	ands	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	2210      	movs	r2, #16
 800361a:	4013      	ands	r3, r2
 800361c:	d00b      	beq.n	8003636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <UART_AdvFeatureConfig+0x154>)
 8003626:	4013      	ands	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2220      	movs	r2, #32
 800363c:	4013      	ands	r3, r2
 800363e:	d00b      	beq.n	8003658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4a25      	ldr	r2, [pc, #148]	; (80036dc <UART_AdvFeatureConfig+0x158>)
 8003648:	4013      	ands	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	2240      	movs	r2, #64	; 0x40
 800365e:	4013      	ands	r3, r2
 8003660:	d01d      	beq.n	800369e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <UART_AdvFeatureConfig+0x15c>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	035b      	lsls	r3, r3, #13
 8003682:	429a      	cmp	r2, r3
 8003684:	d10b      	bne.n	800369e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <UART_AdvFeatureConfig+0x160>)
 800368e:	4013      	ands	r3, r2
 8003690:	0019      	movs	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	4013      	ands	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <UART_AdvFeatureConfig+0x164>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	fffdffff 	.word	0xfffdffff
 80036cc:	fffeffff 	.word	0xfffeffff
 80036d0:	fffbffff 	.word	0xfffbffff
 80036d4:	ffff7fff 	.word	0xffff7fff
 80036d8:	ffffefff 	.word	0xffffefff
 80036dc:	ffffdfff 	.word	0xffffdfff
 80036e0:	ffefffff 	.word	0xffefffff
 80036e4:	ff9fffff 	.word	0xff9fffff
 80036e8:	fff7ffff 	.word	0xfff7ffff

080036ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80036fa:	f7fe f819 	bl	8001730 <HAL_GetTick>
 80036fe:	0003      	movs	r3, r0
 8003700:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2208      	movs	r2, #8
 800370a:	4013      	ands	r3, r2
 800370c:	2b08      	cmp	r3, #8
 800370e:	d10d      	bne.n	800372c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	0399      	lsls	r1, r3, #14
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4b16      	ldr	r3, [pc, #88]	; (8003774 <UART_CheckIdleState+0x88>)
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	0013      	movs	r3, r2
 800371e:	2200      	movs	r2, #0
 8003720:	f000 f82a 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d001      	beq.n	800372c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e01f      	b.n	800376c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2204      	movs	r2, #4
 8003734:	4013      	ands	r3, r2
 8003736:	2b04      	cmp	r3, #4
 8003738:	d10d      	bne.n	8003756 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	03d9      	lsls	r1, r3, #15
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <UART_CheckIdleState+0x88>)
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	0013      	movs	r3, r2
 8003748:	2200      	movs	r2, #0
 800374a:	f000 f815 	bl	8003778 <UART_WaitOnFlagUntilTimeout>
 800374e:	1e03      	subs	r3, r0, #0
 8003750:	d001      	beq.n	8003756 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e00a      	b.n	800376c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2270      	movs	r2, #112	; 0x70
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b004      	add	sp, #16
 8003772:	bd80      	pop	{r7, pc}
 8003774:	01ffffff 	.word	0x01ffffff

08003778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003788:	e05d      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	3301      	adds	r3, #1
 800378e:	d05a      	beq.n	8003846 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003790:	f7fd ffce 	bl	8001730 <HAL_GetTick>
 8003794:	0002      	movs	r2, r0
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	429a      	cmp	r2, r3
 800379e:	d302      	bcc.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11b      	bne.n	80037de <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	492f      	ldr	r1, [pc, #188]	; (8003870 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80037b2:	400a      	ands	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2101      	movs	r1, #1
 80037c2:	438a      	bics	r2, r1
 80037c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2270      	movs	r2, #112	; 0x70
 80037d6:	2100      	movs	r1, #0
 80037d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e043      	b.n	8003866 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2204      	movs	r2, #4
 80037e6:	4013      	ands	r3, r2
 80037e8:	d02d      	beq.n	8003846 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	401a      	ands	r2, r3
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d123      	bne.n	8003846 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4917      	ldr	r1, [pc, #92]	; (8003870 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003814:	400a      	ands	r2, r1
 8003816:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2101      	movs	r1, #1
 8003824:	438a      	bics	r2, r1
 8003826:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2270      	movs	r2, #112	; 0x70
 800383e:	2100      	movs	r1, #0
 8003840:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	425a      	negs	r2, r3
 8003856:	4153      	adcs	r3, r2
 8003858:	b2db      	uxtb	r3, r3
 800385a:	001a      	movs	r2, r3
 800385c:	1dfb      	adds	r3, r7, #7
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d092      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b004      	add	sp, #16
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	fffffe5f 	.word	0xfffffe5f

08003874 <init_mpu6050>:

/*
 * @brief Initialize MPU6050 device
 * @param1 I2C handle type
 */
bool init_mpu6050(I2C_HandleTypeDef *I2C_handle, mpu6050_t *mpu6050) {
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af04      	add	r7, sp, #16
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
	uint8_t data = 0;
 800387e:	240e      	movs	r4, #14
 8003880:	193b      	adds	r3, r7, r4
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
	uint8_t check_ok = 0;
 8003886:	250d      	movs	r5, #13
 8003888:	197b      	adds	r3, r7, r5
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	memset(mpu6050, 0, sizeof(mpu6050_t));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	220e      	movs	r2, #14
 8003892:	2100      	movs	r1, #0
 8003894:	0018      	movs	r0, r3
 8003896:	f000 fa5f 	bl	8003d58 <memset>

	//identify the device
	data = 0;
 800389a:	193b      	adds	r3, r7, r4
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]

	status = HAL_I2C_Mem_Read(I2C_handle, DEV_ADDRESS, WHO_AM_I, 1, &check_ok, sizeof(check_ok), I2C_TIMEOUT);
 80038a0:	230f      	movs	r3, #15
 80038a2:	18fc      	adds	r4, r7, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	23fa      	movs	r3, #250	; 0xfa
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	9302      	str	r3, [sp, #8]
 80038ac:	2301      	movs	r3, #1
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	197b      	adds	r3, r7, r5
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2301      	movs	r3, #1
 80038b6:	2275      	movs	r2, #117	; 0x75
 80038b8:	21d0      	movs	r1, #208	; 0xd0
 80038ba:	f7fe fb4d 	bl	8001f58 <HAL_I2C_Mem_Read>
 80038be:	0003      	movs	r3, r0
 80038c0:	7023      	strb	r3, [r4, #0]

	if(check_ok == DEVICE_OK) {
 80038c2:	197b      	adds	r3, r7, r5
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b68      	cmp	r3, #104	; 0x68
 80038c8:	d161      	bne.n	800398e <init_mpu6050+0x11a>

		// Wake up register by writing all 0 to PWR_MGMT_1 register
		data = 0x00;
 80038ca:	210e      	movs	r1, #14
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
		status = HAL_I2C_Mem_Write(I2C_handle, DEV_ADDRESS, PWR_MGMT_1, 1, &data, sizeof(data), I2C_TIMEOUT);
 80038d2:	260f      	movs	r6, #15
 80038d4:	19bc      	adds	r4, r7, r6
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	23fa      	movs	r3, #250	; 0xfa
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	9302      	str	r3, [sp, #8]
 80038de:	2301      	movs	r3, #1
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	000d      	movs	r5, r1
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	2301      	movs	r3, #1
 80038ea:	226b      	movs	r2, #107	; 0x6b
 80038ec:	21d0      	movs	r1, #208	; 0xd0
 80038ee:	f7fe fa05 	bl	8001cfc <HAL_I2C_Mem_Write>
 80038f2:	0003      	movs	r3, r0
 80038f4:	7023      	strb	r3, [r4, #0]
			HAL_Delay(100);
 80038f6:	2064      	movs	r0, #100	; 0x64
 80038f8:	f7fd ff24 	bl	8001744 <HAL_Delay>

		// set sample rate to 1 KHz by writing SMPLRT_DIV register sample rate = Gyroscope output i.e. 8KHz / (1+SMPLRT_DIV)
		data = 0x07;
 80038fc:	0029      	movs	r1, r5
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	2207      	movs	r2, #7
 8003902:	701a      	strb	r2, [r3, #0]
		status = HAL_I2C_Mem_Write(I2C_handle, DEV_ADDRESS, SMPLRT_DIV_REG, 1, &data, sizeof(data), I2C_TIMEOUT);
 8003904:	19bc      	adds	r4, r7, r6
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	23fa      	movs	r3, #250	; 0xfa
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	9302      	str	r3, [sp, #8]
 800390e:	2301      	movs	r3, #1
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	000d      	movs	r5, r1
 8003914:	187b      	adds	r3, r7, r1
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2301      	movs	r3, #1
 800391a:	2219      	movs	r2, #25
 800391c:	21d0      	movs	r1, #208	; 0xd0
 800391e:	f7fe f9ed 	bl	8001cfc <HAL_I2C_Mem_Write>
 8003922:	0003      	movs	r3, r0
 8003924:	7023      	strb	r3, [r4, #0]
			HAL_Delay(100);
 8003926:	2064      	movs	r0, #100	; 0x64
 8003928:	f7fd ff0c 	bl	8001744 <HAL_Delay>

		// Reset Gyroscope
		//XG_ST = 0, YG_ST = 0, ZG_ST = 0, GFS = +- 250 °/s
		data = 0x00;
 800392c:	0029      	movs	r1, r5
 800392e:	187b      	adds	r3, r7, r1
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
		status = HAL_I2C_Mem_Write(I2C_handle, DEV_ADDRESS, GYRO_CONFIG, 1, &data, sizeof(data), I2C_TIMEOUT);
 8003934:	19bc      	adds	r4, r7, r6
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	23fa      	movs	r3, #250	; 0xfa
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	9302      	str	r3, [sp, #8]
 800393e:	2301      	movs	r3, #1
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	000d      	movs	r5, r1
 8003944:	187b      	adds	r3, r7, r1
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2301      	movs	r3, #1
 800394a:	221b      	movs	r2, #27
 800394c:	21d0      	movs	r1, #208	; 0xd0
 800394e:	f7fe f9d5 	bl	8001cfc <HAL_I2C_Mem_Write>
 8003952:	0003      	movs	r3, r0
 8003954:	7023      	strb	r3, [r4, #0]
			HAL_Delay(100);
 8003956:	2064      	movs	r0, #100	; 0x64
 8003958:	f7fd fef4 	bl	8001744 <HAL_Delay>

		// Reset Accelerometer and set its range
		//XA_ST = 0, YA_ST = 0, ZA_ST = 0, AFS = +- 2g
		data = 0x00;
 800395c:	0029      	movs	r1, r5
 800395e:	187b      	adds	r3, r7, r1
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
		status = HAL_I2C_Mem_Write(I2C_handle, DEV_ADDRESS, ACCEL_CONFIG, 1, &data, sizeof(data), I2C_TIMEOUT);
 8003964:	19bc      	adds	r4, r7, r6
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	23fa      	movs	r3, #250	; 0xfa
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	9302      	str	r3, [sp, #8]
 800396e:	2301      	movs	r3, #1
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	187b      	adds	r3, r7, r1
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	2301      	movs	r3, #1
 8003978:	221c      	movs	r2, #28
 800397a:	21d0      	movs	r1, #208	; 0xd0
 800397c:	f7fe f9be 	bl	8001cfc <HAL_I2C_Mem_Write>
 8003980:	0003      	movs	r3, r0
 8003982:	7023      	strb	r3, [r4, #0]
			HAL_Delay(100);
 8003984:	2064      	movs	r0, #100	; 0x64
 8003986:	f7fd fedd 	bl	8001744 <HAL_Delay>

		return false;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <init_mpu6050+0x11c>
	}

	return true;
 800398e:	2301      	movs	r3, #1
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b005      	add	sp, #20
 8003996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003998 <mpu_readTemp>:
 * @brief Read temperature for the register
 *  @param1 I2C handle type
 *  @parm2 struct MPU6050
 */

void  mpu_readTemp(I2C_HandleTypeDef *I2C_handle, mpu6050_t *mpu6050) {
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af04      	add	r7, sp, #16
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
	uint8_t readTemp[2] = {0,0};
 80039a2:	210c      	movs	r1, #12
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	2200      	movs	r2, #0
 80039ae:	705a      	strb	r2, [r3, #1]
	int16_t temp = 0;
 80039b0:	230e      	movs	r3, #14
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	2200      	movs	r2, #0
 80039b6:	801a      	strh	r2, [r3, #0]

	//read two bytes of temperature data start from TEMP_MEM_HIGH_ADDRES

	if(HAL_I2C_Mem_Read(I2C_handle, DEV_ADDRESS, TEMP_MEM_ADDRESS_HIGH, 1, readTemp, sizeof(readTemp), I2C_TIMEOUT) == HAL_OK) {
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	23fa      	movs	r3, #250	; 0xfa
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	9302      	str	r3, [sp, #8]
 80039c0:	2302      	movs	r3, #2
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	2301      	movs	r3, #1
 80039ca:	2241      	movs	r2, #65	; 0x41
 80039cc:	21d0      	movs	r1, #208	; 0xd0
 80039ce:	f7fe fac3 	bl	8001f58 <HAL_I2C_Mem_Read>
 80039d2:	1e03      	subs	r3, r0, #0
 80039d4:	d12b      	bne.n	8003a2e <mpu_readTemp+0x96>

		temp = (readTemp[0] << 8) | readTemp[1];
 80039d6:	220c      	movs	r2, #12
 80039d8:	18bb      	adds	r3, r7, r2
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	b219      	sxth	r1, r3
 80039e0:	18bb      	adds	r3, r7, r2
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	b21a      	sxth	r2, r3
 80039e6:	250e      	movs	r5, #14
 80039e8:	197b      	adds	r3, r7, r5
 80039ea:	430a      	orrs	r2, r1
 80039ec:	801a      	strh	r2, [r3, #0]
		temp = (int16_t) (temp/340 + 36.53);  	// temp in degC
 80039ee:	197b      	adds	r3, r7, r5
 80039f0:	2200      	movs	r2, #0
 80039f2:	5e9a      	ldrsh	r2, [r3, r2]
 80039f4:	23aa      	movs	r3, #170	; 0xaa
 80039f6:	0059      	lsls	r1, r3, #1
 80039f8:	0010      	movs	r0, r2
 80039fa:	f7fc fc0f 	bl	800021c <__divsi3>
 80039fe:	0003      	movs	r3, r0
 8003a00:	b21b      	sxth	r3, r3
 8003a02:	0018      	movs	r0, r3
 8003a04:	f7fd fb4a 	bl	800109c <__aeabi_i2d>
 8003a08:	4a0b      	ldr	r2, [pc, #44]	; (8003a38 <mpu_readTemp+0xa0>)
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <mpu_readTemp+0xa4>)
 8003a0c:	f7fc fcf2 	bl	80003f4 <__aeabi_dadd>
 8003a10:	0003      	movs	r3, r0
 8003a12:	000c      	movs	r4, r1
 8003a14:	001a      	movs	r2, r3
 8003a16:	0023      	movs	r3, r4
 8003a18:	197c      	adds	r4, r7, r5
 8003a1a:	0010      	movs	r0, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	f7fd fb07 	bl	8001030 <__aeabi_d2iz>
 8003a22:	0003      	movs	r3, r0
 8003a24:	8023      	strh	r3, [r4, #0]
		mpu6050->temp = temp;		// store into struct variable
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	197a      	adds	r2, r7, r5
 8003a2a:	8812      	ldrh	r2, [r2, #0]
 8003a2c:	801a      	strh	r2, [r3, #0]
	}
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bdb0      	pop	{r4, r5, r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	0a3d70a4 	.word	0x0a3d70a4
 8003a3c:	404243d7 	.word	0x404243d7

08003a40 <getTemp>:

/*
 * @brief return stored temp value
 */
int16_t getTemp(mpu6050_t *mpu6050) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	return mpu6050->temp;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003a4e:	0018      	movs	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b002      	add	sp, #8
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <mpu_readGyroscope>:
 * @brief Read Gyroscope values for X,Y,Z from the register
 *  @param1 I2C handle type
 *  @parm2 struct MPU6050
 */

void mpu_readGyroscope(I2C_HandleTypeDef *I2C_handle, mpu6050_t *mpu6050) {
 8003a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5a:	b08b      	sub	sp, #44	; 0x2c
 8003a5c:	af04      	add	r7, sp, #16
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]

	uint8_t gyro_xyz[6];
	int16_t gyro_x = 0, gyro_y = 0, gyro_z = 0;
 8003a62:	2316      	movs	r3, #22
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	2200      	movs	r2, #0
 8003a68:	801a      	strh	r2, [r3, #0]
 8003a6a:	2314      	movs	r3, #20
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2200      	movs	r2, #0
 8003a70:	801a      	strh	r2, [r3, #0]
 8003a72:	2312      	movs	r3, #18
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	2200      	movs	r2, #0
 8003a78:	801a      	strh	r2, [r3, #0]
	memset(gyro_xyz, 0, sizeof(gyro_xyz));
 8003a7a:	240c      	movs	r4, #12
 8003a7c:	193b      	adds	r3, r7, r4
 8003a7e:	2206      	movs	r2, #6
 8003a80:	2100      	movs	r1, #0
 8003a82:	0018      	movs	r0, r3
 8003a84:	f000 f968 	bl	8003d58 <memset>

	//read 6 bytes of gyroscope register start from GYRO_XOUT_H

	if (HAL_I2C_Mem_Read(I2C_handle, DEV_ADDRESS, GYRO_XOUT_H, 1, gyro_xyz, sizeof(gyro_xyz), I2C_TIMEOUT) == HAL_OK) {
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	23fa      	movs	r3, #250	; 0xfa
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	9302      	str	r3, [sp, #8]
 8003a90:	2306      	movs	r3, #6
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2301      	movs	r3, #1
 8003a9a:	2243      	movs	r2, #67	; 0x43
 8003a9c:	21d0      	movs	r1, #208	; 0xd0
 8003a9e:	f7fe fa5b 	bl	8001f58 <HAL_I2C_Mem_Read>
 8003aa2:	1e03      	subs	r3, r0, #0
 8003aa4:	d15d      	bne.n	8003b62 <mpu_readGyroscope+0x10a>

		gyro_x = (gyro_xyz[0] << 8) | gyro_xyz[1];
 8003aa6:	200c      	movs	r0, #12
 8003aa8:	183b      	adds	r3, r7, r0
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	b219      	sxth	r1, r3
 8003ab0:	183b      	adds	r3, r7, r0
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	b21a      	sxth	r2, r3
 8003ab6:	2416      	movs	r4, #22
 8003ab8:	193b      	adds	r3, r7, r4
 8003aba:	430a      	orrs	r2, r1
 8003abc:	801a      	strh	r2, [r3, #0]
		gyro_y = (gyro_xyz[2] << 8) | gyro_xyz[3];
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	789b      	ldrb	r3, [r3, #2]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	b219      	sxth	r1, r3
 8003ac6:	183b      	adds	r3, r7, r0
 8003ac8:	78db      	ldrb	r3, [r3, #3]
 8003aca:	b21a      	sxth	r2, r3
 8003acc:	2514      	movs	r5, #20
 8003ace:	197b      	adds	r3, r7, r5
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	801a      	strh	r2, [r3, #0]
		gyro_z = (gyro_xyz[4] << 8) | gyro_xyz[5];
 8003ad4:	183b      	adds	r3, r7, r0
 8003ad6:	791b      	ldrb	r3, [r3, #4]
 8003ad8:	021b      	lsls	r3, r3, #8
 8003ada:	b219      	sxth	r1, r3
 8003adc:	183b      	adds	r3, r7, r0
 8003ade:	795b      	ldrb	r3, [r3, #5]
 8003ae0:	b21a      	sxth	r2, r3
 8003ae2:	2612      	movs	r6, #18
 8003ae4:	19bb      	adds	r3, r7, r6
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	801a      	strh	r2, [r3, #0]

		mpu6050->gyro_x = gyro_x/131.0;
 8003aea:	193b      	adds	r3, r7, r4
 8003aec:	2200      	movs	r2, #0
 8003aee:	5e9b      	ldrsh	r3, [r3, r2]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7fd fad3 	bl	800109c <__aeabi_i2d>
 8003af6:	2200      	movs	r2, #0
 8003af8:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <mpu_readGyroscope+0x114>)
 8003afa:	f7fc ff97 	bl	8000a2c <__aeabi_ddiv>
 8003afe:	0003      	movs	r3, r0
 8003b00:	000c      	movs	r4, r1
 8003b02:	0018      	movs	r0, r3
 8003b04:	0021      	movs	r1, r4
 8003b06:	f7fd fa93 	bl	8001030 <__aeabi_d2iz>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	b21a      	sxth	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	811a      	strh	r2, [r3, #8]
		mpu6050->gyro_y = gyro_y/131.0;
 8003b12:	197b      	adds	r3, r7, r5
 8003b14:	2200      	movs	r2, #0
 8003b16:	5e9b      	ldrsh	r3, [r3, r2]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7fd fabf 	bl	800109c <__aeabi_i2d>
 8003b1e:	2200      	movs	r2, #0
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <mpu_readGyroscope+0x114>)
 8003b22:	f7fc ff83 	bl	8000a2c <__aeabi_ddiv>
 8003b26:	0003      	movs	r3, r0
 8003b28:	000c      	movs	r4, r1
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	0021      	movs	r1, r4
 8003b2e:	f7fd fa7f 	bl	8001030 <__aeabi_d2iz>
 8003b32:	0003      	movs	r3, r0
 8003b34:	b21a      	sxth	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	815a      	strh	r2, [r3, #10]
		mpu6050->gyro_z = gyro_z/131.0;
 8003b3a:	19bb      	adds	r3, r7, r6
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	5e9b      	ldrsh	r3, [r3, r2]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fd faab 	bl	800109c <__aeabi_i2d>
 8003b46:	2200      	movs	r2, #0
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <mpu_readGyroscope+0x114>)
 8003b4a:	f7fc ff6f 	bl	8000a2c <__aeabi_ddiv>
 8003b4e:	0003      	movs	r3, r0
 8003b50:	000c      	movs	r4, r1
 8003b52:	0018      	movs	r0, r3
 8003b54:	0021      	movs	r1, r4
 8003b56:	f7fd fa6b 	bl	8001030 <__aeabi_d2iz>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	b21a      	sxth	r2, r3
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	819a      	strh	r2, [r3, #12]
	}
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b007      	add	sp, #28
 8003b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	40606000 	.word	0x40606000

08003b70 <read_Gyro_X>:
/*
 * @brief return stored gyro_x value
 */
int16_t read_Gyro_X(mpu6050_t *mpu6050) {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

	return mpu6050->gyro_x;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b002      	add	sp, #8
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <read_Gyro_Y>:
/*
 * @brief return stored gyro_y value
 */
int16_t read_Gyro_Y(mpu6050_t *mpu6050) {
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]

	return mpu6050->gyro_y;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	220a      	movs	r2, #10
 8003b92:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b002      	add	sp, #8
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <read_Gyro_Z>:
/*
 * @brief return stored gyro_z value
 */
int16_t read_Gyro_Z(mpu6050_t *mpu6050) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]

	return mpu6050->gyro_z;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	220c      	movs	r2, #12
 8003ba8:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <mpu_readAccel>:
 * @brief Read Gyroscope values for X,Y,Z from the register
 *  @param1 I2C handle type
 *  @parm2 struct MPU6050
 */

void mpu_readAccel(I2C_HandleTypeDef *I2C_handle, mpu6050_t * mpu6050) {
 8003bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb6:	b08b      	sub	sp, #44	; 0x2c
 8003bb8:	af04      	add	r7, sp, #16
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]

	uint8_t accel_xyz[6];
	int16_t accel_x = 0, accel_y = 0, accel_z = 0;
 8003bbe:	2316      	movs	r3, #22
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	2314      	movs	r3, #20
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	2200      	movs	r2, #0
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	2312      	movs	r3, #18
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	801a      	strh	r2, [r3, #0]
	memset(accel_xyz, 0, sizeof(accel_xyz));
 8003bd6:	240c      	movs	r4, #12
 8003bd8:	193b      	adds	r3, r7, r4
 8003bda:	2206      	movs	r2, #6
 8003bdc:	2100      	movs	r1, #0
 8003bde:	0018      	movs	r0, r3
 8003be0:	f000 f8ba 	bl	8003d58 <memset>

	//read 6 bytes of gyroscope register start from GYRO_XOUT_H

	if (HAL_I2C_Mem_Read(I2C_handle, DEV_ADDRESS, ACCEL_XOUT_H, 1, accel_xyz, sizeof(accel_xyz), I2C_TIMEOUT) == HAL_OK) {
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	23fa      	movs	r3, #250	; 0xfa
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	9302      	str	r3, [sp, #8]
 8003bec:	2306      	movs	r3, #6
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	193b      	adds	r3, r7, r4
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	223b      	movs	r2, #59	; 0x3b
 8003bf8:	21d0      	movs	r1, #208	; 0xd0
 8003bfa:	f7fe f9ad 	bl	8001f58 <HAL_I2C_Mem_Read>
 8003bfe:	1e03      	subs	r3, r0, #0
 8003c00:	d15d      	bne.n	8003cbe <mpu_readAccel+0x10a>

		accel_x = (accel_xyz[0] << 8) | accel_xyz[1];
 8003c02:	200c      	movs	r0, #12
 8003c04:	183b      	adds	r3, r7, r0
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	b219      	sxth	r1, r3
 8003c0c:	183b      	adds	r3, r7, r0
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	b21a      	sxth	r2, r3
 8003c12:	2416      	movs	r4, #22
 8003c14:	193b      	adds	r3, r7, r4
 8003c16:	430a      	orrs	r2, r1
 8003c18:	801a      	strh	r2, [r3, #0]
		accel_y = (accel_xyz[2] << 8) | accel_xyz[3];
 8003c1a:	183b      	adds	r3, r7, r0
 8003c1c:	789b      	ldrb	r3, [r3, #2]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	b219      	sxth	r1, r3
 8003c22:	183b      	adds	r3, r7, r0
 8003c24:	78db      	ldrb	r3, [r3, #3]
 8003c26:	b21a      	sxth	r2, r3
 8003c28:	2514      	movs	r5, #20
 8003c2a:	197b      	adds	r3, r7, r5
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	801a      	strh	r2, [r3, #0]
		accel_z = (accel_xyz[4] << 8) | accel_xyz[5];
 8003c30:	183b      	adds	r3, r7, r0
 8003c32:	791b      	ldrb	r3, [r3, #4]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	b219      	sxth	r1, r3
 8003c38:	183b      	adds	r3, r7, r0
 8003c3a:	795b      	ldrb	r3, [r3, #5]
 8003c3c:	b21a      	sxth	r2, r3
 8003c3e:	2612      	movs	r6, #18
 8003c40:	19bb      	adds	r3, r7, r6
 8003c42:	430a      	orrs	r2, r1
 8003c44:	801a      	strh	r2, [r3, #0]

		mpu6050->accel_x = accel_x/16384.0;		// as full scale select as 2g and its sensitivity is 16384/g
 8003c46:	193b      	adds	r3, r7, r4
 8003c48:	2200      	movs	r2, #0
 8003c4a:	5e9b      	ldrsh	r3, [r3, r2]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f7fd fa25 	bl	800109c <__aeabi_i2d>
 8003c52:	2200      	movs	r2, #0
 8003c54:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <mpu_readAccel+0x114>)
 8003c56:	f7fc fee9 	bl	8000a2c <__aeabi_ddiv>
 8003c5a:	0003      	movs	r3, r0
 8003c5c:	000c      	movs	r4, r1
 8003c5e:	0018      	movs	r0, r3
 8003c60:	0021      	movs	r1, r4
 8003c62:	f7fd f9e5 	bl	8001030 <__aeabi_d2iz>
 8003c66:	0003      	movs	r3, r0
 8003c68:	b21a      	sxth	r2, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	805a      	strh	r2, [r3, #2]
		mpu6050->accel_y = accel_y/16384.0;
 8003c6e:	197b      	adds	r3, r7, r5
 8003c70:	2200      	movs	r2, #0
 8003c72:	5e9b      	ldrsh	r3, [r3, r2]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7fd fa11 	bl	800109c <__aeabi_i2d>
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <mpu_readAccel+0x114>)
 8003c7e:	f7fc fed5 	bl	8000a2c <__aeabi_ddiv>
 8003c82:	0003      	movs	r3, r0
 8003c84:	000c      	movs	r4, r1
 8003c86:	0018      	movs	r0, r3
 8003c88:	0021      	movs	r1, r4
 8003c8a:	f7fd f9d1 	bl	8001030 <__aeabi_d2iz>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	b21a      	sxth	r2, r3
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	809a      	strh	r2, [r3, #4]
		mpu6050->accel_z = accel_z/16384.0;
 8003c96:	19bb      	adds	r3, r7, r6
 8003c98:	2200      	movs	r2, #0
 8003c9a:	5e9b      	ldrsh	r3, [r3, r2]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7fd f9fd 	bl	800109c <__aeabi_i2d>
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <mpu_readAccel+0x114>)
 8003ca6:	f7fc fec1 	bl	8000a2c <__aeabi_ddiv>
 8003caa:	0003      	movs	r3, r0
 8003cac:	000c      	movs	r4, r1
 8003cae:	0018      	movs	r0, r3
 8003cb0:	0021      	movs	r1, r4
 8003cb2:	f7fd f9bd 	bl	8001030 <__aeabi_d2iz>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	b21a      	sxth	r2, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	80da      	strh	r2, [r3, #6]
	}
}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b007      	add	sp, #28
 8003cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	40d00000 	.word	0x40d00000

08003ccc <read_accel_X>:

/*
 * @brief return stored accel_x value
 */
int16_t read_accel_X(mpu6050_t * mpu6050) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

	return mpu6050->accel_x;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b002      	add	sp, #8
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <read_accel_Y>:
/*
 * @brief return stored gyro_y value
 */
int16_t read_accel_Y(mpu6050_t * mpu6050) {
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]

	return mpu6050->accel_y;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2204      	movs	r2, #4
 8003cee:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <read_accel_Z>:
/*
 * @brief return stored gyro_z value
 */
int16_t read_accel_Z(mpu6050_t * mpu6050) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

	return mpu6050->accel_z;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2206      	movs	r2, #6
 8003d04:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	2600      	movs	r6, #0
 8003d14:	4d0c      	ldr	r5, [pc, #48]	; (8003d48 <__libc_init_array+0x38>)
 8003d16:	4c0d      	ldr	r4, [pc, #52]	; (8003d4c <__libc_init_array+0x3c>)
 8003d18:	1b64      	subs	r4, r4, r5
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	2600      	movs	r6, #0
 8003d22:	f000 f821 	bl	8003d68 <_init>
 8003d26:	4d0a      	ldr	r5, [pc, #40]	; (8003d50 <__libc_init_array+0x40>)
 8003d28:	4c0a      	ldr	r4, [pc, #40]	; (8003d54 <__libc_init_array+0x44>)
 8003d2a:	1b64      	subs	r4, r4, r5
 8003d2c:	10a4      	asrs	r4, r4, #2
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	00b3      	lsls	r3, r6, #2
 8003d36:	58eb      	ldr	r3, [r5, r3]
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	00b3      	lsls	r3, r6, #2
 8003d40:	58eb      	ldr	r3, [r5, r3]
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	08003df8 	.word	0x08003df8
 8003d4c:	08003df8 	.word	0x08003df8
 8003d50:	08003df8 	.word	0x08003df8
 8003d54:	08003dfc 	.word	0x08003dfc

08003d58 <memset>:
 8003d58:	0003      	movs	r3, r0
 8003d5a:	1812      	adds	r2, r2, r0
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <memset+0xa>
 8003d60:	4770      	bx	lr
 8003d62:	7019      	strb	r1, [r3, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	e7f9      	b.n	8003d5c <memset+0x4>

08003d68 <_init>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6e:	bc08      	pop	{r3}
 8003d70:	469e      	mov	lr, r3
 8003d72:	4770      	bx	lr

08003d74 <_fini>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr
